{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce","text":"<p>\u8fd9\u662f\u6211\u7684\u7f51\u7ad9\u4e2d\u7684\u4e2a\u4eba\u7f51\u7ad9\u5206\u652f\uff0c\u4e3b\u7ad9\u8bf7\u8f6c\u81f3 \u8fd9\u91cc\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/","title":"\u6e38\u8bb0","text":"<p>\u6e38\u8bb0\uff0c\u5f80\u5f80\u662f\u8bb0\u5f55\u4eba\u6700\u771f\u5b9e\u7684\u4f53\u9a8c\u7684\u6587\u7ae0\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u591a\u5f69\u7684\u751f\u6d3b\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/","title":"2025 \u6691 TYOI \u96c6\u8bad\u5c0f\u8bb0","text":""},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-0-2025-08-03-\u661f\u671f\u65e5","title":"Day 0 2025-08-03 \u661f\u671f\u65e5","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u4e0b\u5348 15:20 \u7684\u6837\u5b50\u5230\u7684\u7ad9\uff0c\u7ed3\u679c 16:00 \u624d\u4e0a\u5730\u94c1\uff08\uff1f</p> <p>\u4e0d\u662f\u6211\u4e0d\u7406\u89e3\uff0c\u5728\u8f66\u4e0a\u770b\u7740\u53ea\u662f\u4e4c\u4e91\uff0c\u600e\u4e48\u4e00\u51fa\u5730\u94c1\u5c31\u4e0b\u8fa3\u4e48\u5927\u7684\u96e8\u5462 \\((\u2299\ufe4f\u2299)\\)\uff0c\u91cd\u70b9\u662f\u6211\u88c5\u868a\u5e10\u7684\u888b\u5b50\u8fd8\u574f\u6389\u4e86 \\((\u256f\u2594\u76bf\u2594)\u256f\\)\uff01\uff01\uff01</p> <p>\u665a\u4e0a\u597d\u714e\u71ac\uff0c\u6709\u597d\u591a dalao \u5207\u4e86\u7b2c\u4e8c\u5929\u7684\u9898\u76ee %%%</p> <p>\u56de\u5bdd\u76f4\u63a5\u6d17\u6d17\u7761\u4e86\uff0c\u8fd8\u6709\u4e24\u4e2a TY \u672c\u6821\u7684\u3002</p> \u540e\u8bb0\uff0c\u522b\u770b <p>\u4e3a\u4ec0\u4e48\u611f\u89c9\u5b66\u957f\u7684\u58f0\u97f3\u5b8c\u5168\u548c\u957f\u76f8\u4e0d\u5339\u914d\u554a\u554a\u554a\u554a\u554a\u554a</p> <p>\uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c \uff1e\ufe4f\uff1c </p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-1-2025-08-04-\u661f\u671f\u4e00","title":"Day 1 2025-08-04 \u661f\u671f\u4e00","text":"<p>\u5355\u8c03\u961f\u5217\u3001\u6811\u72b6\u6570\u7ec4\u3001\u500d\u589e\u3001\u5e76\u67e5\u96c6</p> <p>\u5f88\u6b63\u5e38\uff0c\u4f46\u662f\u5f53\u4f60\u6ce8\u610f\u5230 1 \u84dd 16 \u7d2b \u7684\u65f6\u5019\uff0c\u4e8b\u60c5\u5c31\u4e0d\u7b80\u5355\u4e86\u3002</p> <p>\u54e6\uff0c12 \u70b9\u4e86\uff0c\u6211\u5148\u5403\u4e2a\u5348\u996d\u3002</p> <p>\u554a\u6728\u554a\u6728\u554a\u6728\u62cc\u9762\u771f\u8c6a\u8d64 \u96be\u602a\u6211\u5c0f\u5b66\u6258\u7ba1\u73ed\u8001\u5e08\u662f\u5e7f\u4e1c\u7684\uff0c\u5473\u9053\u4e00\u6a21\u4e00\u6837 \u554a\u6728\u554a\u6728\u554a\u6728\u554a\u6728\u554a\u6728\u554a\u6728\u554a\u6728</p> <p>\u4e0d\u5bf9\uff0c\u7c89\u4e1d\u5148\u5403\uff08\u6211\u6ca1\u56fe\uff09</p> <p>\u8001\u5e08\u8bb2\u662f\u8bb2\u4e86\uff0c\u4f46\u662f\u542c\u4e0d\u61c2\u542c\u4e0d\u61c2\u542c\u4e0d\u61c2</p> <p>\u56f0\u56f0\u56f0\u56f0\u56f0\u56f0\u56f0\u56f0\u56f0\u56f0\u56f0\u56f0</p> <p>\u738b\u8d85\u5427\u4eca\u5929\u665a\u4e0a\u4f53\u80b2\u8bfe\u6574\u8fa3\u4e48\u5927\u5f3a\u5ea6\u7684\u4f53\u80fd\u8bad\u7ec3\uff0c\u771f\u7684\u662f\u75af\u4e86</p> \u540e\u8bb0 08/05 <p>\u86d9\u8da3\uff0c\u6628\u5929\u4f53\u953b\u540e\u6ca1\u6709\u62c9\u4f38\uff08\u8001\u5e08\u6ca1\u5e26\u6211\u4eec\u505a\u62c9\u4f38\uff09\uff0c\u65e9\u4e0a\u8d77\u6765\u8840\u91cf\u4e0a\u9650\u51cf\u534a\uff0c\u901f\u5ea6\u51cf\u534a</p> 08/06 <p>\u5c31\u7b97\u6628\u665a\u62c9\u4f38\u4e86\uff0c\u4f46\u662f\u4e5f\u4e0d\u8212\u670d\uff0c\u611f\u89c9\u901f\u5ea6\u53c8\u88ab\u524a\u4e86\uff0c\u8fd8\u5e26\u4e0a\u4e86\u957f\u8fbe 29h \u65f6\u957f\u7684\u5267\u6bd2\u6548\u679c\u3002\u73b0\u5728\u611f\u89c9\u817f\u662f\u75db\u7684\u3002</p> <p>\u5148\u6302\u4e2a\u889c\u5b50\uff08\u6d17\u4e86\uff09\uff0c\u540e\u5929\u518d\u53d6</p> <p>\u7b49\u4f1a\u6211\u5148\u53bb\u98df\u5802\u6574\u70b9\u591c\u5bb5\u5403</p> <p>\u554a\u6728\u554a\u6728\u554a\u6728\u554a\u6728</p> <p>\u554a\u5c31\u50cf \u8fd9\u6837\u3002</p> <p>\u725b\u8089\u4e38\u771f\u8c6a\u8d64</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-2-2025-08-05-\u661f\u671f\u4e8c","title":"Day 2 2025-08-05 \u661f\u671f\u4e8c","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u5148\u7ed9\u51fa\u5f53\u5929\u7ec3\u9898\u7684\u9898\u5355\u3002</p> <p>\u4e0a\u5348</p> <p>\u4e2d\u5348\uff1a\u54ce\u4e0d\u662f\u600e\u4e48\u53bb\u665a\u4e86\u4e00\u4e22\u4e22\u5c31\u6ca1\u62cc\u9762\u5403\u4e86 qwp</p> <p>\u4e0b\u5348</p> <p>\u4ec0\u4e48\u662f\u5e73\u8861\u6811\u554a\u542c\u4e0d\u61c2\u542c\u4e0d\u61c2\u542c\u4e0d\u61c2</p> <p>\u4ec0\u4e48\u662f\u5409\u8001\u5e08\u7ebf\u6bb5\u6811\u554a\u542c\u4e0d\u61c2\u542c\u4e0d\u61c2\u542c\u4e0d\u61c2</p> <p>byd \u7b2c\u4e8c\u5929\u5c31\u5f80\u9898\u5355\u91cc\u585e\u9ed1\u9898\uff0c\u8fd8\u8ba9\u4e0d\u8ba9\u4eba\u6d3b\u4e86 (\u3063 \u00b0\u0414 \u00b0;)\u3063</p> <p>\u611f\u89c9\u4eca\u5929\u5c31\u5728\uff1a</p> <pre><code>while(1) {\n    look(\"\u6d1b\u8c37\u4e0a\u7684\u5e16\u5b50\");\n    write(\"\u56de\u590d\")\uff1b\n}\n</code></pre> <p>\u8fd8\u5728 gza \u7684\u5e16\u5b50\u91cc\u5f00\u706b\u4e86\uff0c\u4f4f\u4e86\u7ba1\u7406\u5458\u697c\u4e0b</p> <p>\u54e6\u5bf9\u4e86\u56e0\u4e3a CZOI \u8bf4\u6709<sub>~\u5976\u9f99</sub>~ \u5c0f\u6e38\u9898\uff0c\u6211\u53bb\u770b\u4e86\u4e00\u773c\uff0c\u6ca1\u5207\u3002</p> <p>\u4eca\u665a\u4f53\u80b2\u8bfe\u524d\u534a\u622a\u6401\u54ea\u8df3\u821e\uff0cnmd \u8fd9\u4e0b\u771f\u6210\u5c0f\u821e\u840c\u4e86\uff0cc\u3002</p> \u54e6\u5bf9\u4e86 <p>\u6211\u4eec\u8df3\u64cd\u7684\u65f6\u5019\uff0c\u8df3\u4e86\uff1a - \u5976\u9f99 \u5c0f\u6e38 \u821e</p> <p>\u97f3\u4e50\u4e2d\u5305\u542b\u4e86\uff1a - \u6c5f\u5357 Style</p> <p>\u8fd8\u6709\u4e00\u4e9b\u4e0d\u8bb0\u5f97\uff0c\u554a\u53cd\u6b63\u53ea\u8981\u77e5\u9053\u6210\u5206\u662f\u5341\u5206\u590d\u6742\u7684\u5c31\u884c\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-3-2025-08-06-\u661f\u671f\u4e09","title":"Day 3 2025-08-06 \u661f\u671f\u4e09","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u4e8b\u4e0d\u8fc7\u4e09\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u5bf9\u5427\uff1f</p> <p></p> <p>\u9898\u5355\u4e2d\u6709\u4e00\u9053\u7eff\u9898\u3002</p> \\[ \\Huge{\\text{\u4f46\u662f\u5bf9\u4e2a\u9b3c\u554a\uff01\uff01\uff01}} \\] <p>\u90a3\u9053\u7eff\u9898\uff0c\u662f</p> \\[ \\Huge{\\text{CDQ \\ \u5206\u6cbb}} \\] <p>\u6211\u73a9 nm\uff0cwdnmd\uff01c\uff0c\u4e0d\u73a9\u4e86\u3002</p> <p>\u56de\u5230\u51fa\u9898\u7ec4\uff0c\u914d\u6570\u636e\u53bb\u4e86\u3002\u914d\u4e86\u4e00\u4e0b\u5348 + \u4e00\u665a\u4e0a\uff0c\u4e00\u9053\u5783\u573e\u5c0f\u9898\u76ee\u7531\u4e8e\u6211\u4e0d\u60f3\u5199\u9ad8\u7cbe\u7ec8\u4e8e\u88ab\u6211\u914d\u597d\u4e86\uff08\u8d5b\u9898\u6682\u4e0d\u516c\u5f00\uff09</p> <p>\u54e6\u5bf9\u4e86\uff0c\u665a\u4e0a\u6709\u4f53\u80b2\u8bfe\uff0c\u8fd9\u6b21\u665a\u4e0a\u8001\u5e08\u8ba9\u6211\u4eec\u6253\u516b\u6bb5\u9526\uff08\uff1f \u5446\u5728\u90a3\u91cc\uff0c\u50cf\u6781\u4e86\u4f53\u80b2\u9986\u91cc\u5728\u67d0\u4e00\u79cd\u76db\u5927\u7684\u5b97\u6559\u76db\u4f1a\uff08\uff1f \u91cd\u70b9\u662f\uff0c\u6253\u5b8c\u592a\u6781\u4e4b\u540e\u53c8\u5316\u8eab\u5c0f\u821e\u840c\uff08\uff1f\uff1f\uff1f \u7136\u540e\uff0c\u7531\u4e8e\u6211\u4eec\u662f B \u73ed\uff0c\u7136\u540e\u53c8\u53bb\u6253\u8dc6\u62f3\u9053\uff08\uff1f\uff1f\uff1f\uff1f\uff1f</p> tips <p>\u6253\u8dc6\u62f3\u9053\u662f\u4ece\u5468\u4e00\u665a\u4e0a\u5f00\u59cb\u7684\uff0c\u867d\u7136\u6b63\u5e38\uff0c\u4f46\u662f\u6210\u5206\u590d\u6742\u3002</p> <p>\u55ef\uff0c\u597d\u4e00\u4e2a\u7efc\u5408\u5168\u9762\u53d1\u5c55\uff01</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-4-2025-08-07-\u661f\u671f\u56db","title":"Day 4 2025-08-07 \u661f\u671f\u56db","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u83ab\u961f\u662f\u5e72\u4ec0\u4e48\u7528\u7684 awa\uff1f</p> <p>\u600e\u4e48\u5c31\u8fd9\u4e48\u5199\u51fa\u6765\u4e86 awa\uff1f</p> <p>\u4e3a\u4ec0\u4e48\u8981\u5206\u5757 awa\uff1f</p> <p>\u7b49\u4f1a\u5206\u5757\u662f\u4ec0\u4e48 awa\uff1f</p> <p>A Few Moments Later...</p> <p>\u8bf6\u4ec0\u4e48\uff0c\u4e8c\u5206\uff1f\u90a3\u4e0d\u6709\u624b\u5c31\u884c\uff01</p> <p>wc \u8fd9\u50cf\u662f\u4e8c\u5206\u5417\uff1f</p> <p>\u8865\u5151\uff0c\u6574\u4f53\u4e8c\u5206\uff0c\u6574\u4f53\u4e8c\u5206\u662f\u5565\uff1f</p> <p>\u54e6\u5c31\u662f\u4e00\u8d77\u4e8c\u5206\u641c\u4e86\u3002</p> <p>\u90a3\u600e\u4e48\u641c\u5462 awa</p> <p>wdnmd \u6211\u542c\u4e0d\u61c2\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\u554a\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01</p> <p>\u6211\u60f3\u5e72\u4f46\u6ca1\u5e72\u6210\u7684\u4e8b\u60c5</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-5-2025-08-08-\u661f\u671f\u4e94","title":"Day 5 2025-08-08 \u661f\u671f\u4e94","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u5e73\u8861\u6811\u542c\u8d77\u6765\u662f\u5341\u5206\u8212\u670d\u7684\u270c</p> <p>\uff08\u5927\u6982\u539f\u56e0\u662f\u6362\u4e86\u4e2a\u5b66\u957f\u8bb2\u8bfe\u5427\uff0chhh</p> <p>\u4eca\u5929\u8fd8\u62a2\u4e86\u4e2a\u9996\u89e3\uff08\u3010\u6a21\u7248\u3011\u53ef\u6301\u4e45\u5316\u5e73\u8861\u6811\uff09</p> <p>\u7136\u540e\u628a\u5b83\u4e00\u8d77\u6574\u5408\u6210\u4e86\u6570\u636e\u7ed3\u6784\uff0c\u60f3\u770b\u6211\u7684 std \u7684\u81ea\u5df1\u770b\uff0c\u4e0d\u60f3\u770b\u7684\u7565\u8fc7\u8c22\u8c22\u3002</p> \u8fd9\u51e0\u5929\u7684\u6570\u636e\u7ed3\u6784\uff08\u4e0d\u5efa\u8bae\u5c55\u5f00\uff09 <pre><code>/*\n* @file std-datastruct.cpp\n* @author Federico Prask\n* @time 2025-08-08\n*/\n\n#include &lt;bits/stdc++.h&gt;\n#define file(s) \\\n    std::freopen(#s\".in\", \"r\", stdin), std::freopen(#s\".out\", \"w\", stdout)\n\nusing i64 = long long;\nusing ull = unsigned long long;\nusing f32 = double;\nusing ldb = long double;\n\nnamespace trix{\n    inline int readint() {\n        register int x = 0, sign = 1;\n        register char ch = getchar();\n        for (; !isdigit(ch); ch = getchar()) {\n            if (ch == '-') {    \n                sign = -1;\n            }\n            if (ch == EOF) {\n                return EOF;\n            }\n        }\n        for (; isdigit(ch); ch = getchar()) {\n            x = x * 10 + ch - '0';\n        }\n        return x * sign;\n    }\n    inline i64 readi64() {\n        register i64 x = 0, sign = 1;\n        register char ch = getchar();\n        for (; !isdigit(ch); ch = getchar()) {\n            if (ch == '-') {    \n                sign = -1;\n            }\n            if (ch == EOF) {\n                return EOF;\n            }\n        }\n        for (; isdigit(ch); ch = getchar()) {\n            x = x * 10 + ch - '0';\n        }\n        return x * sign;\n    }\n    inline char readchar() {\n        register char ch = getchar();\n        for (; ch == ' ' || ch == '\\n'; ch = getchar()) {\n            continue;\n        }\n        return ch;\n    }\n}\n\nnamespace DataStruct {\n    // Segment-Tree\n    template&lt;int _N&gt;\n    class Segment_Tree_Segadd {\n        struct binary_tree {\n            i64 left_son = 0, right_son = 0;\n            i64 value = 0, addition = 0;\n        } node[_N &lt;&lt; 2];\n        i64 *a;\n\n        public:\n            void build_tree(i64 n, i64 *_a) {\n                a = _a;\n                _build_tree(1, 1, n);\n            }\n            void update(i64 l, i64 r, i64 val) {\n                if (l &gt; r) return;\n                _update(1, l, r, val);\n            }\n            i64 query(i64 l, i64 r) {\n                if (l &gt; r) return 0;\n                return _query(1, l, r);\n            }\n\n        private:\n            void pushup(i64 x) {\n                node[x].value = node[x &lt;&lt; 1].value + node[(x &lt;&lt; 1) | 1].value;\n            }\n            void pushdown(i64 x) {\n                if (node[x].addition) {\n                    i64 left = x &lt;&lt; 1;\n                    i64 right = (x &lt;&lt; 1) | 1;\n                    i64 len_left = node[left].right_son - node[left].left_son + 1;\n                    i64 len_right = node[right].right_son - node[right].left_son + 1;\n\n                    node[left].addition += node[x].addition;\n                    node[right].addition += node[x].addition;\n                    node[left].value += node[x].addition * len_left;\n                    node[right].value += node[x].addition * len_right;\n                    node[x].addition = 0;\n                }\n            }\n            void _build_tree(i64 x, i64 l, i64 r) {\n                node[x].left_son = l;\n                node[x].right_son = r;\n                node[x].addition = 0;\n                if (l == r) {\n                    node[x].value = a[l];\n                    return;\n                }\n                i64 mid = (l + r) &gt;&gt; 1;\n                _build_tree(x &lt;&lt; 1, l, mid);\n                _build_tree((x &lt;&lt; 1) | 1, mid + 1, r);\n                pushup(x);\n            }\n            void _update(i64 now, i64 l, i64 r, i64 k) {\n                if (l &lt;= node[now].left_son &amp;&amp; r &gt;= node[now].right_son) {\n                    node[now].value += k * (node[now].right_son - node[now].left_son + 1);\n                    node[now].addition += k;\n                    return;\n                }\n\n                pushdown(now);\n                i64 mid = (node[now].left_son + node[now].right_son) &gt;&gt; 1;\n                if (l &lt;= mid) _update(now &lt;&lt; 1, l, r, k);\n                if (r &gt; mid) _update((now &lt;&lt; 1) | 1, l, r, k);\n                pushup(now);\n            }\n            i64 _query(i64 x, i64 l, i64 r) {\n                if (l &lt;= node[x].left_son &amp;&amp; node[x].right_son &lt;= r) {\n                    return node[x].value;\n                }\n                pushdown(x);\n                i64 mid = (node[x].left_son + node[x].right_son) &gt;&gt; 1;\n                i64 sum = 0;\n                if (l &lt;= mid) {\n                    sum += _query(x &lt;&lt; 1, l, r);\n                }\n                if (r &gt; mid) {\n                    sum += _query((x &lt;&lt; 1) | 1, l, r);\n                }\n                return sum;\n            }\n        };\n\n    // Segment-Tree for Range Cover (with Range Query)\n    template&lt;int _N&gt;\n    class Segment_Tree_Segcover {\n        struct binary_tree {\n            i64 left_son = 0, right_son = 0;\n            i64 value = 0, cover = 0;\n            bool has_cover = false;\n        } node[_N &lt;&lt; 2];\n        i64 *a;\n\n        public:\n            void build_tree(i64 n, i64 *_a) {\n                a = _a;\n                _build_tree(1, 1, n);\n            }\n            void update(i64 l, i64 r, i64 val) {\n                if (l &gt; r) return;\n                _update(1, l, r, val);\n            }\n            i64 query(i64 l, i64 r) {\n                if (l &gt; r) return 0;\n                return _query(1, l, r);\n            }\n\n        private:\n            void pushup(i64 x) {\n                node[x].value = node[x &lt;&lt; 1].value + node[(x &lt;&lt; 1) | 1].value;\n            }\n            void pushdown(i64 x) {\n                if (node[x].has_cover) {\n                    i64 left = x &lt;&lt; 1;\n                    i64 right = (x &lt;&lt; 1) | 1;\n                    i64 len_left = node[left].right_son - node[left].left_son + 1;\n                    i64 len_right = node[right].right_son - node[right].left_son + 1;\n\n                    node[left].cover = node[x].cover;\n                    node[right].cover = node[x].cover;\n                    node[left].value = node[x].cover * len_left;\n                    node[right].value = node[x].cover * len_right;\n                    node[left].has_cover = true;\n                    node[right].has_cover = true;\n\n                    node[x].has_cover = false;\n                }\n            }\n            void _build_tree(i64 x, i64 l, i64 r) {\n                node[x].left_son = l;\n                node[x].right_son = r;\n                node[x].has_cover = false;\n                if (l == r) {\n                    node[x].value = a[l];\n                    return;\n                }\n                i64 mid = (l + r) &gt;&gt; 1;\n                _build_tree(x &lt;&lt; 1, l, mid);\n                _build_tree((x &lt;&lt; 1) | 1, mid + 1, r);\n                pushup(x);\n            }\n            void _update(i64 now, i64 l, i64 r, i64 k) {\n                if (l &lt;= node[now].left_son &amp;&amp; r &gt;= node[now].right_son) {\n                    node[now].value = k * (node[now].right_son - node[now].left_son + 1);\n                    node[now].cover = k;\n                    node[now].has_cover = true;\n                    return;\n                }\n\n                pushdown(now);\n                i64 mid = (node[now].left_son + node[now].right_son) &gt;&gt; 1;\n                if (l &lt;= mid) _update(now &lt;&lt; 1, l, r, k);\n                if (r &gt; mid) _update((now &lt;&lt; 1) | 1, l, r, k);\n                pushup(now);\n            }\n            i64 _query(i64 x, i64 l, i64 r) {\n                if (l &lt;= node[x].left_son &amp;&amp; node[x].right_son &lt;= r) {\n                    return node[x].value;\n                }\n                pushdown(x);\n                i64 mid = (node[x].left_son + node[x].right_son) &gt;&gt; 1;\n                i64 sum = 0;\n                if (l &lt;= mid) {\n                    sum += _query(x &lt;&lt; 1, l, r);\n                }\n                if (r &gt; mid) {\n                    sum += _query((x &lt;&lt; 1) | 1, l, r);\n                }\n                return sum;\n            }\n    };\n\n    // Treap\n    class Treap {\n        // define a binary tree using arrays\n        static const int MN = 2100005;\n        int l[MN], r[MN];\n        int value[MN], rand_val[MN], sz[MN], w[MN];\n        int nans, size;\n        int root;\n\n        public:\n            Treap() : root(0), size(0), nans(0) {\n                std::memset(l, 0, sizeof(l));\n                std::memset(r, 0, sizeof(r));\n                std::srand(std::time(0));\n            }\n            int qrnk(int x) {\n                return queryrank(root, x);\n            }\n            int qnum(int x) {\n                return querynum(root, x);\n            }\n            int qpre(int x) {\n                nans = 0;\n                querypre(root, x);\n                return nans ? value[nans] : -2147483647;\n            }\n            int qsub(int x) {\n                nans = 0;\n                querysub(root, x);\n                return nans ? value[nans] : 2147483647;\n            }\n            void del(int x) {\n                _delete(root, x);\n            }\n            void ins(int x) {\n                _insert(root, x);\n            }\n\n        private:\n            void pushup(int x) {\n                sz[x] = sz[l[x]] + sz[r[x]] + w[x];\n            }\n            void left_rotate(int &amp;k) {\n                int t = r[k];\n                r[k] = l[t];\n                l[t] = k;\n                sz[t] = sz[k];\n                pushup(k);\n                k = t;\n            }\n            void right_rotate(int &amp;k) {\n                int t = l[k];\n                l[k] = r[t];\n                r[t] = k;\n                sz[t] = sz[k];\n                pushup(k);\n                k = t;\n            }\n            void _insert(int &amp;k, int x) {\n                if (!k) {\n                    size++;\n                    k = size;\n                    sz[k] = 1;\n                    w[k] = 1;\n                    value[k] = x;\n                    rand_val[k] = rand();\n                    return;\n                }\n                sz[k]++;\n                if (value[k] == x) {\n                    w[k]++;\n                } else if (value[k] &lt; x) {\n                    _insert(r[k], x);\n                    if (rand_val[r[k]] &lt; rand_val[k]) {\n                        left_rotate(k);\n                    }\n                } else {\n                    _insert(l[k], x);\n                    if (rand_val[l[k]] &lt; rand_val[k]) {\n                        right_rotate(k);\n                    }\n                }\n            }\n            bool _delete(int &amp;k, int x) {\n                if (!k) {\n                    return false;\n                }\n                if (value[k] == x) {\n                    if (w[k] &gt; 1) {\n                        w[k]--;\n                        sz[k]--;\n                        return true;\n                    }\n                    if (l[k] == 0 || r[k] == 0) {\n                        k = l[k] + r[k];\n                        return true;\n                    } else if (rand_val[l[k]] &lt; rand_val[r[k]]) {\n                        right_rotate(k);\n                        return _delete(k, x);\n                    } else {\n                        left_rotate(k);\n                        return _delete(k, x);\n                    }\n                } else if (value[k] &lt; x) {\n                    bool succ = _delete(r[k], x);\n                    if (succ) {\n                        sz[k]--;\n                    }\n                    return succ;\n                } else {\n                    bool succ = _delete(l[k], x);\n                    if (succ) {\n                        sz[k]--;\n                    }\n                    return succ;\n                }\n            }\n            int queryrank(int k, int x) {\n                if (!k) {\n                    return 1;  // Return 1 if empty\n                }\n                if (value[k] == x) {\n                    return sz[l[k]] + 1;\n                } else if (x &gt; value[k]) {\n                    return sz[l[k]] + w[k] + queryrank(r[k], x);\n                } else {\n                    return queryrank(l[k], x);\n                }\n            }\n            int querynum(int k, int x) {\n                if (!k) {\n                    return 0;\n                }\n                if (x &lt;= sz[l[k]]) {\n                    return querynum(l[k], x);\n                }\n                else if (x &gt; sz[l[k]] + w[k]) {\n                    return querynum(r[k], x - sz[l[k]] - w[k]);\n                }\n                else {\n                    return value[k];\n                }\n            }\n            void querypre(int k, int x) {\n                if (!k) {\n                    return;\n                }\n                if (value[k] &lt; x) {\n                    nans = k;\n                    querypre(r[k], x);\n                }\n                else {\n                    querypre(l[k], x);\n                }\n            }\n            void querysub(int k, int x) {\n                if (!k) {\n                    return;\n                }\n                if (value[k] &gt; x) {\n                    nans = k;\n                    querysub(l[k], x);\n                }\n                else {\n                    querysub(r[k], x);\n                }\n            }\n    };\n\n    // FHQ-Treap (Non-rotating Treap)\n    class FHQTreap {\n        static const int MN = 2100005;\n        int l[MN], r[MN];\n        int value[MN], rand_val[MN], sz[MN];\n        int cnt, root;\n\n        public:\n            FHQTreap() : root(0), cnt(0) {\n                std::memset(l, 0, sizeof(l));\n                std::memset(r, 0, sizeof(r));\n                std::srand(std::time(0));\n            }\n            void ins(int x) {\n                int a, b;\n                split(root, x, a, b);\n                root = merge(merge(a, new_node(x)), b);\n            }\n            void del(int x) {\n                int a, b, c;\n                split(root, x, a, b);\n                split(b, x + 1, b, c);\n                if (b) {\n                    b = merge(l[b], r[b]);\n                }\n                root = merge(merge(a, b), c);\n            }\n            int qrnk(int x) {\n                int a, b;\n                split(root, x - 1, a, b);\n                int res = sz[a] + 1;\n                root = merge(a, b);\n                return res;\n            }\n            int qnum(int k) {\n                return kth(root, k);\n            }\n            int qpre(int x) {\n                int a, b;\n                split(root, x - 1, a, b);\n                int res = kth(a, sz[a]);\n                root = merge(a, b);\n                return res;\n            }\n            int qsub(int x) {\n                int a, b;\n                split(root, x, a, b);\n                int res = kth(b, 1);\n                root = merge(a, b);\n                return res;\n            }\n\n        private:\n            int new_node(int x) {\n                cnt++;\n                value[cnt] = x;\n                rand_val[cnt] = rand();\n                sz[cnt] = 1;\n                return cnt;\n            }\n            void pushup(int x) {\n                sz[x] = sz[l[x]] + sz[r[x]] + 1;\n            }\n            void split(int now, int k, int &amp;x, int &amp;y) {\n                if (!now) {\n                    x = y = 0;\n                    return;\n                }\n                if (value[now] &lt;= k) {\n                    x = now;\n                    split(r[now], k, r[now], y);\n                } else {\n                    y = now;\n                    split(l[now], k, x, l[now]);\n                }\n                pushup(now);\n            }\n            int merge(int x, int y) {\n                if (!x || !y) {\n                    return x | y;\n                }\n                if (rand_val[x] &lt; rand_val[y]) {\n                    r[x] = merge(r[x], y);\n                    pushup(x);\n                    return x;\n                } else {\n                    l[y] = merge(x, l[y]);\n                    pushup(y);\n                    return y;\n                }\n            }\n            int kth(int now, int k) {\n                while (true) {\n                    if (k &lt;= sz[l[now]]) {\n                        now = l[now];\n                    } else if (k == sz[l[now]] + 1) {\n                        return value[now];\n                    } else {\n                        k -= sz[l[now]] + 1;\n                        now = r[now];\n                    }\n                }\n            }\n    };\n\n    // Persistent FHQ-Treap (Non-rotating Treap)\n    class PersistentFHQTreap {\n        static const int MN = 5e5 + 10;\n        static const int INF = 2147483647;\n        struct Node {\n            int l, r;\n            int val, key;\n            int size;\n        } t[MN * 50];\n\n        public:\n            int root[MN], cnt;\n            PersistentFHQTreap() : cnt(0) {\n                std::fill(root, root + MN, 0);\n                std::srand(std::time(0));\n            }\n            void insert(int ver, int new_ver, int val) {\n                root[new_ver] = root[ver];\n                int x, y;\n                split(root[new_ver], val, x, y);\n                root[new_ver] = merge(merge(x, new_node(val)), y);\n            }\n            void remove(int ver, int new_ver, int val) {\n                root[new_ver] = root[ver];\n                int x, y, z;\n                split(root[new_ver], val, x, z);\n                split(x, val - 1, x, y);\n                if (y) y = merge(t[y].l, t[y].r);\n                root[new_ver] = merge(merge(x, y), z);\n            }\n            int get_rank(int ver, int val) {\n                int x, y;\n                split(root[ver], val - 1, x, y);\n                int res = t[x].size + 1;\n                root[ver] = merge(x, y);\n                return res;\n            }\n            int get_val(int ver, int rank) {\n                return _get_val(root[ver], rank);\n            }\n            int get_prev(int ver, int val) {\n                int x, y;\n                split(root[ver], val - 1, x, y);\n                if (!x) return -INF + 1;\n                int res = _get_val(x, t[x].size);\n                root[ver] = merge(x, y);\n                return res;\n            }\n            int get_next(int ver, int val) {\n                int x, y;\n                split(root[ver], val, x, y);\n                if (!y) return INF;\n                int res = _get_val(y, 1);\n                root[ver] = merge(x, y);\n                return res;\n            }\n\n        private:\n            int new_node(int val) {\n                t[++cnt] = {0, 0, val, rand(), 1};\n                return cnt;\n            }\n            int clone(int p) {\n                if (!p) return 0;\n                t[++cnt] = t[p];\n                return cnt;\n            }\n            void pushup(int p) {\n                t[p].size = t[t[p].l].size + t[t[p].r].size + 1;\n            }\n            void split(int p, int val, int &amp;x, int &amp;y) {\n                if (!p) {\n                    x = y = 0;\n                    return;\n                }\n                p = clone(p);\n                if (t[p].val &lt;= val) {\n                    x = p;\n                    split(t[x].r, val, t[x].r, y);\n                } else {\n                    y = p;\n                    split(t[y].l, val, x, t[y].l);\n                }\n                pushup(p);\n            }\n            int merge(int x, int y) {\n                if (!x || !y) return x | y;\n                if (t[x].key &lt; t[y].key) {\n                    x = clone(x);\n                    t[x].r = merge(t[x].r, y);\n                    pushup(x);\n                    return x;\n                } else {\n                    y = clone(y);\n                    t[y].l = merge(x, t[y].l);\n                    pushup(y);\n                    return y;\n                }\n            }\n            int _get_val(int p, int rank) {\n                while (true) {\n                    if (rank &lt;= t[t[p].l].size) {\n                        p = t[p].l;\n                    } else if (rank == t[t[p].l].size + 1) {\n                        return t[p].val;\n                    } else {\n                        rank -= t[t[p].l].size + 1;\n                        p = t[p].r;\n                    }\n                }\n            }\n    };\n}// namespace datastruct\n\nconstexpr int M = 1e6;\n\nusing trix::readint;\n\nint main() {\n    #ifdef FILEIO\n    file(std-datastruct);\n    #endif\n\n    #ifdef CPPIO\n    std::cin.tie(0) -&gt; sync_with_stdio(0);\n    #endif\n\n    /* Code Here. */\n\n    return 0;\n}\n</code></pre> <p>\u54ce\u4e0d\u662f\uff0c\u660e\u5929\u600e\u4e48\u8fd8\u6709\u6d4b\u8bd5\u554a\uff0c\u90a3\u6211\u4e0d\u70b8\u4e86\u5417\u3002</p> \u522b\u770b <p>\u4eca\u5929\u665a\u4e0a\u8dd1\u6b65\u662f\u8dd1\u4e86\u6211\u4eec\u5b66\u6821\u7b2c\u4e00\uff0c\u4f46\u662f\u5427\uff0c\u8dd1\u524d\u591a\u559d\u4e86\u70b9\u6c34\uff0c\u5c31\u5728\u80c3\u91cc\u6447\u554a\u6447\u554a\u6447\uff0c\u5bfc\u81f4\u8dd1\u5b8c\u4e4b\u540e\u6709\u70b9\u96be\u53d7 \u5455\u5455\u5455\u5455\u5455yueyueyueyueyue</p> <p>\u800c\u4e14\u6211\u4eec\u4eca\u5929\u6253\u8dc6\u62f3\u9053\u8fd8\u4e0d\u5728\u9986\u5185\u6253\uff0c\u5728\u5ba4\u5916\u3002\u4eca\u5929\u5927\u592a\u9633\u7167\u4e86\u4e00\u5929\uff0c\u665a\u4e0a\u5916\u9762\u8fd0\u52a8\u8981\u70ed\u6b7b\u4e86</p> <p>\u5bf9\u4e86\uff0c\u522b\u95ee\u4eca\u5929\u6e38\u8bb0\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u77ed\uff0c\u56e0\u4e3a\u6211\u5c01\u88c5\u7684\u6570\u636e\u7ed3\u6784\u592a\u957f\u4e86\uff0c\u4e5f\u82b1\u8d39\u592a\u591a\u65f6\u95f4\u4e86\uff0c\u5c31\u6ca1\u65f6\u95f4\u5199\u4e86\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-6-2025-08-09-\u661f\u671f\u516d","title":"Day 6 2025-08-09 \u661f\u671f\u516d","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> \u6ce8\u610f\u5230 <p>\u4eca\u5929\u4e0d\u8003\u8bd5\u4e86\uff0c\u5ef6\u671f\u4e86\uff0c\u4eca\u5929\u505a\u9898\uff0c\u6628\u5929\u7684\u9898\u62a2\u5230\u4e86 rank #2</p> <p>\u665a\u4e0a\u51fa\u53bb\u5403\u7684\uff0c\u5403\u7684\u4ec0\u4e48\u7626\u8089\u725b\u4e38\u7cbf\u6761\uff0c\u8fd8\u4e0d\u9519\uff0c\u5c31\u662f\u6709\u70b9\u8d35\u3002</p> <p>\u665a\u4e0a\u4e70\u4e86\u676f\u745e\u5e78\uff08\u4e0d\u662f\u5e7f\u5b50\u4e5f\u4e0d\u662f\u5496\u5561\uff0c\u70b9\u7684\u5976\u8336\uff09\uff0c\u611f\u89c9\u8fd8\u884c\uff0c\u4f46\u662f\u6211\u5f88 unhappy \u7684\u4e00\u70b9\u5c31\u662f\u6211\u6ca1\u6709\u770b\u5230\u8336\u767e\u9053\uff0c\u4e0d\u7136\u6211\u53bb\u70b9\u8336\u767e\u9053\u4e86\u3002</p> <p>\u4eca\u5929\u8fc7\u5f97\u4e00\u822c\u822c\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-7-2025-08-10-\u661f\u671f\u65e5","title":"Day 7 2025-08-10 \u661f\u671f\u65e5","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u4eca\u5929\u53bb\u4e86\u4e00\u8d9f\u540e\u9762\u5fd8\u4e86\u3002</p> \u770b\u4e86\u4e00\u773c\u53c2\u89c2\u6307\u5357\u60f3\u8d77\u6765\u4e86 <p>\u4eca\u5929\u53bb\u4e86\u4e00\u8d9f \\(\\Huge{\u5e7f\u4e1c\u79d1\u5b66\u4e2d\u5fc3}\\)\u3002</p> <p>\u53d1\u73b0\u6587\u521b\u5e97\u91cc\u597d\u591a\u7455\u75b5\u54c1\uff0c\u6240\u4ee5\u6ca1\u4e70\u3002</p> <p>\u4ed6\u7684\u4e00\u4e9b\u8282\u6c14\u6d77\u62a5\u8fd8\u633a\u597d\u770b\u7684\uff0c\u5177\u4f53\u8be6\u89c1\u6211\u7684\u5fae\u4fe1\u670b\u53cb\u5708\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-8-2025-08-11-\u661f\u671f\u4e00","title":"Day 8 2025-08-11 \u661f\u671f\u4e00","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u5fd8\u8bb0\u5199\u4e86\uff0c\u5fd8\u4e86\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-9-2025-08-12-\u661f\u671f\u4e8c","title":"Day 9 2025-08-12 \u661f\u671f\u4e8c","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u5fd8\u8bb0\u5199\u4e86\uff0c\u57fa\u672c\u5fd8\u4e86\u3002</p> \u5343\u4e07 \u5343\u4e07 \u8981\u8bb0\u4f4f \u6253\u7403 \u4e4b\u524d \u8981\u770b \u62cd\u5b50\u7684 \u8d28\u91cf \u4e0d\u7136 \u4f60 \u53ef\u80fd\u4f1a \u9047\u5230 \u6325\u62cd \u4e4b\u540e \u62cd\u5b50 \u98de\u4e86 \u5341\u51e0\u7c73 \u8fdc \u7136\u540e \u649e\u5230 \u5899\u58c1 \u6389\u4e0b\u4e86 \u697c <p>\uff08\u867d\u7136\u662f zqh \u5e72\u7684\u4f46\u6211\u8fd8\u662f\u70ed\u5fc3\u7684\u63d0\u9192\u4e00\u4e0b\u5927\u5bb6\uff09</p> <p>\u5f88\u597d\u7684\u5d4c\u5957\u4f7f\u6211\u7684\u5927\u8111\u65cb\u8f6c\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-10-2025-08-13-\u661f\u671f\u4e09","title":"Day 10 2025-08-13 \u661f\u671f\u4e09","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u4e0a\u5348</p> <p>\u7761\u89c9\uff0c\u4f7f\u5f97\u6211\u7684\u9f20\u6807\u57ab\u6e7f\u4e86\uff08\u6211\u51fa\u4e00\u8eab\u6c57\uff09</p> \u6211\u4e0d\u674e\u59d0 <p>\u603b\u662f\u6709\u4e00\u4e9b\u65f6\u5019\u7761\u89c9\u51fa\u7279\u522b\u591a\u7684\u6c57\uff0c\u4f46\u662f\u665a\u4e0a\u4ece\u6765\u4e0d\u51fa\u3002</p> <p>\u4e0b\u5348</p> <p>\u5f88\u597d\u7684\u6d1b\u8c37\u6708\u8d5b\uff0c\u8bc1\u660e T1 \u7684\u6b63\u89e3\u7684\u6b63\u786e\u6027\u4f7f\u6211\u7684\u5927\u8111\u7ffb\u8f6c\uff08\u672c\u6765\u51c6\u5907\u4eca\u665a\u5199\u7684\uff09\u3002</p> <p>\u665a\u4e0a</p> <p>\u542c\u6b4c\u5199\u6e38\u8bb0\u3002</p> <p>\u4f53\u80b2\u8bfe\u6253\u4e52\u4e53\u53d1\u73b0\u5730\u5f62\u5d0e\u5c96\uff0c\u4e00\u770b\u5c31\u662f\u4e18\u9675\u5730\u5f62\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-11-2025-08-14-\u661f\u671f\u56db","title":"Day 11 2025-08-14 \u661f\u671f\u56db","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-12-2025-08-15-\u661f\u671f\u4e94","title":"Day 12 2025-08-15 \u661f\u671f\u4e94","text":"<ul> <li> \u5199\u6e38\u8bb0</li> <li> \u5f00\u53d1\u7f51\u7ad9</li> </ul> <p>\u7f51\u7ad9\u505a\u7684\u4e0d\u9519</p> <p>\u4f46\u662f\u6211\u662f\u5510\u6bd4\uff0c\u505a\u7f51\u7ad9\u7684\u65f6\u5019\u628a\u6211\u4ee5\u524d\u7684\u9879\u76ee\u5220\u6389\u4e86\uff08\u8f93\u5165\u7684\u547d\u4ee4\u6e05\u7a7a\u4e86\u6587\u4ef6\u5939\u624d\u914d\u7f6e\u7684\u67b6\u6784\uff09</p> <p>\u9700\u8981\u627e\u4e2a\u65f6\u95f4\u4fee\u4e00\u4e0b\u3002</p> <p>\u94fe\u63a5</p> <p>\u665a\u81ea\u4e60\u7a0d\u5fae\u52a0\u4e86\u4e2a\u65b0\u529f\u80fd\uff0c\u4e5f\u5c31\u662f\u7f51\u7ad9\u7684\u201c\u5173\u4e8e\u201d\u90e8\u5206\u3002</p> <p>\u4e4b\u540e\u4f1a\u6162\u6162\u52a0\u529f\u80fd\u7684\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-13-2025-08-16-\u661f\u671f\u516d","title":"Day 13 2025-08-16 \u661f\u671f\u516d","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u4e0a\u5348\u6d4b\u4e86\u4e2a\u8bd5\uff0c\u8fd0\u6c14\u597d\u62ff\u4e86\u4e2a rank #1</p> \u603b\u7ed3\uff08\u522b\u770b\uff0c\u53cd\u6b63\u5c31\u662f\u6211\u662f\u4eba\u673a\uff09 <p>\u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d</p> <p>\u7701\u6d41\uff1a\u6211\u662f\u4eba\u673a\uff0c\u6211\u592a\u83dc\u4e86\uff0c\u6211\u662f\u849f\u84bb</p> <p>\u7701\u6d41\uff1a\u6211\u662f\u4eba\u673a\uff0c\u6211\u592a\u83dc\u4e86\uff0c\u6211\u662f\u849f\u84bb</p> <p>\u7701\u6d41\uff1a\u6211\u662f\u4eba\u673a\uff0c\u6211\u592a\u83dc\u4e86\uff0c\u6211\u662f\u849f\u84bb</p> <p>\u867d\u7136\uff0c</p> <p></p> <p>\u4f46\u662f\u4f60\u4ed4\u7ec6\u770b\u770b\uff0c</p> <p>\\(\\because\\)</p> <p></p> <p>\\(\\therefore\\)</p> <p>\u6211\u4eca\u5929\u4e0b\u5348\u4e0a\u673a\uff0c\u7535\u8111\u70b8\u4e86 5 \u6b21\uff0c\u6709\u4e09\u6b21\u6211\u5f3a\u5236\u91cd\u542f\u4e86\uff0c\u5269\u4e0b\u7684\u4e24\u6b21\u6211\u72c2\u6309 \\(\\text{Alt + F4}\\) \u628a\u7a97\u53e3\u5173\u6389\u4e86\u3002</p> <p>tips: \u6211\u731c\u8fd9\u7535\u8111\u6709\u5185\u5b58\u6cc4\u6f0f\uff0c\u800c\u4e14\u865a\u62df\u5185\u5b58\u5267\u5c0f\uff0c\u4f7f\u5f97\u6211\u603b\u662f\u5bb9\u6613\u5185\u5b58\u7206\u6808\u3002</p> <p>T1 \u6ca1\u8fc7\uff0c\u7b7e\u5230\u9898\u6ca1\u8fc7\u8bf4\u660e\u6211\u592a\u83dc\u4e86\uff0c\u6ca1\u6709\u5199\u51fa\u6b63\u89e3\uff0c\u770b\u6765\u6211\u7684\u5237\u9898\u91cf\u8fd8\u662f\u592a\u5c11\u4e86 \u3002</p> <p>T2 \u6b63\u5e38\u89e3\u51fa\u6765\uff0c\u663e\u7136\u5207 T2 \u7684\u4eba\u8fd8\u662f\u7279\u522b\u591a\u7684\u3002</p> <p>T3 \u592a\u60ca\u9669\u4e86\uff0c\u81ea\u5df1\u770b\u63d0\u4ea4\u65f6\u95f4\u5427\u3002</p> <p></p> <p>\u663e\u7136\uff0c\u6211\u8fd8\u662f\u592a\u83dc\u4e86\uff0cdp \u5b66\u7684\u4e0d\u884c\uff0c\u5c31\u662f\u4e2a\u5e9f\u7269\u3002</p> <p>\u800c\u4e14\u4ee3\u7801\u8fd8\u6709\u4eba\u8ba4\u4e3a\u662f\u4eba\u673a\uff08AI\uff09\u3002</p> <p>\u4e0d\u8fc7\u786e\u5b9e\uff0c\u5f53\u65f6\u6ce8\u610f\u5230\u5bb9\u6613\u70b8\uff08\u6700\u5f00\u59cb\u5199\u7684\u7528\u4e86\u56db\u7ef4\u6570\u7ec4\uff0c\u7b97\u4e86\u4e0b\u5185\u5b58\u5360\u7528\uff0c\u8981 4 \u4e2a GB\uff0c\u6240\u4ee5\u540e\u6765\u7528\u4e86 <code>vector</code>\uff0c\u4f7f\u5f97\u6211\u7684\u4ee3\u7801\u975e\u5e38\u62bd\u8c61\uff09</p> <p>\uff08\u4ee5\u540e\u4f1a\u6539\u7684\uff09</p> <pre><code>std::vector&lt;std::vector&lt;std::vector&lt;int&gt;&gt;&gt; dp(\n        a + 1, std::vector&lt;std::vector&lt;int&gt;&gt;(\n            b + 1, std::vector&lt;int&gt;(c + 1, INF)));\n</code></pre> <p>\uff08\u6211\u4e5f\u89c9\u5f97\u633a\u72d7\u5c4e\uff0c\u4e0d\u8fc7\u987a\u4fbf\u7ed9\u5927\u5bb6\u770b\u6211\u4e00\u4f4d\u5b66\u957f\u7684\u9006\u5929\u64cd\u4f5c\u5c31\u4f1a\u89c9\u5f97\u8fd9\u4e16\u95f4\u662f\u6709\u4eba\u4e0a\u4eba\u7684\uff09</p> <p>\uff08\u8fd8\u662f Vim \u5927\u4f6c\uff09</p> <p> </p> <p>\uff08\u4e8b\u540e\u4ed6\u53d1\u73b0 <code>vector</code> \u8ba9\u4ed6 TLE \u4e86\uff09</p> <p>\u505a T5 \u65f6\u5f88\u5e86\u5e78\u524d\u4e00\u5929\u665a\u4e0a\u627e\u6211\u7684\u5b66\u957f\u590d\u4e60\u4e86\u4ee5\u4e0b\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u4eca\u5929<sub>~\u6253</sub>~\u4f7f\u7528\u6211\u4e4b\u524d\u7684\u4e3b\u5e2d\u6811\u677f\u5b50\u8fd8\u662f\u633a\u987a\u7545\u7684\u3002</p> <p>T6 \u7684\u6dc0\u7c89\u8d28\u6211\u4e0d\u4f1a\uff0c\u554a\u6240\u4ee5\u8fd8\u662f\u6211\u592a\u83dc\u4e86\uff0c\u52a0\u4e0a\u8d85\u957f\u7801\u91cf\u6211\u80af\u5b9a\u662f\u60f3\u4e0d\u51fa\u6765\u7684\uff0c\uff08\u8d5b\u65f6\u4e5f\u80af\u5b9a\u5199\u4e0d\u51fa\u6765\uff09\u3002</p> <p>\u4e0d\u8fc7\u5199 T6 \u7684\u65f6\u5019\u65f6\u95f4\u4e0d\u591a\u4e86\uff0c\u6240\u4ee5\u6211\u5149\u901f\u6253\u4e86\u4e2a\u66b4\u641c\u8dd1\u8def\u4e86\uff08\u5f88\u597d\u7684\u62ff\u4e0b\u4e86 Subtask 1\uff09</p> <p>\u663e\u7136\u6211\u8fd0\u6c14\u8fd8\u662f\u5f88\u597d\u7684\uff0c\u6df7\u4e86\u4e2a 505 \u7684 rank #1\uff0c\u6ca1\u60f3\u5230\u8fd9\u4e48\u849f\u84bb\u4e5f\u914d\u62ff rank #1\u3002</p> <p>\u54a6\u539f\u6765\u6a59\u6f2b\u5c71\u8336\u82b1\u5c31\u662f\u76f4\u63a5\u628a\u4e0d\u53bb\u76ae\u7684\u6a59\u5b50\u653e\u8fdb\u53bb\u5417</p> <p>\u665a\u4e0a\u548c\u5b66\u957f\u51fa\u53bb\u5403\u4e86\u4e2a\u996d\uff0c\u8fd8\u5077\u5077\u5f88\u540c\u5b66\u6253\u7535\u8bdd\u804a\u4e86\u4f1a\u5929\u3002</p> <p>\u54e6\u5bf9\u4e86\uff0c\u8fd8\u6253\u4e86\u4f1a Phi\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-14-2025-08-17-\u661f\u671f\u65e5","title":"Day 14 2025-08-17 \u661f\u671f\u65e5","text":"<ul> <li> \u5199\u6e38\u8bb0</li> </ul> <p>\u663e\u7136\uff0c\u6211\u4eec\u56db\u4e2a\u62e5\u6709\u5177\u6709\u6e38\u620f\u5c5e\u6027\u7684\u8bbe\u5907\u7684\u4eba\u4e2d\uff0c\u6709\u4e09\u4e2a\u90fd\u662f\u73a9\u4e09\u89d2\u6d32\u7684\u3002</p> <p>\u6240\u4ee5\u4ed6\u4eec\u4e09\u4e2a\u4ece\u65e9\u4e0a\u5403\u5b8c\u996d\u5c31\u5f00\u59cb\u8d56\u7740\u6253\u4e09\u89d2\u6d32\u3002</p> <p>\u4e0a\u5348\u7684\u8ba1\u5212\u662f\u53bb\u4e2d\u5c71\u5927\u5b66\u3002</p> <p>\u901b\u5b8c\u535a\u7269\u9986\u5427\uff0c\u5f85\u5728\u4ed6\u7684\u6587\u521b\u5e97\uff0c\u770b\u5230\u63d2\u5934\u53c8\u662f\u76f4\u63a5\u5f00\u73a9\uff0c\u76f4\u63a5\u7ed9\u5e72\u5230\u4e86\u95ed\u9986\u65f6\u95f4\uff0c\u5de5\u4f5c\u4eba\u5458\u8981\u6c42\u6211\u4eec \u6eda \u79bb\u5f00\u3002</p> <p>\u4e0b\u5348\u5f85\u5728\u5bdd\u5ba4\uff0c\u540c\u5b66\u53d1\u4e86\u9053\u9ad8\u4e2d\u6570\u5b66\u9898\u8fc7\u6765\uff0c\u88ab\u6211\u79d2\u4e86\u3002</p> <p>\uff08\u4f46\u662f\u665a\u4e0a\u542c\u8bb2\u5ea7\u6ca1\u4e8b\u5e72\u8fd8\u662f\u53bb\u5199\u4e86\u4e00\u4efd\u8be6\u7ec6\u8bc1\u660e\uff09</p> <p>\u54e6\u665a\u4e0a\u8054\u5408\u53bb\u6253\u767d\u590d\u751f IN Lv.16 \u4e86\uff0c\u6211\u4eec\u51e0\u4e2a\u771f\u5389\u5bb3\uff08\u4e00\u524d\u9762\u4e00\u7ed3\u5c3e\u4e00\u65c1\u89c2\uff09\uff0c\u6253\u51fa\u4e86 10 G \u7684\u597d\u6210\u7ee9\uff08\u539f\u6765\u6ca1\u6709 FC\uff09\u3002</p>"},{"location":"%E6%B8%B8%E8%AE%B0/2025%20%E6%9A%91%20TYOI%20%E9%9B%86%E8%AE%AD%E5%B0%8F%E8%AE%B0/#day-15-2025-08-18-\u661f\u671f\u4e00","title":"Day 15 2025-08-18 \u661f\u671f\u4e00","text":"<ul> <li> \u5199\u6e38\u8bb0</li> <li> \u4fee\u590d\u6587\u6863\u7ad9</li> </ul> <p>\u54a6 @ImposterAnYu \u665a\u4e0a 0 \u70b9\u8fd8\u5728\u770b\u6d1b\u8c37\u554a\uff1f\u8fd8\u6709\u7287\u7287\u53d1\uff0c\u7fa1\u6155\u4e86\u3002</p> <p>\u4eca\u5929\u4e3a \u7f51\u7ad9 \u589e\u52a0\u4e86\u4e00\u70b9\u65b0\u529f\u80fd\uff0c\u5177\u4f53\u5c31\u662f\u80fd\u591f\u652f\u6301 Markdown \u5d4c\u5165\u548c KaTeX \u652f\u6301\u3002</p> \u5931\u8d25 <p>\u4eca\u5929\u8c03\u8bd5\u7f51\u7ad9\u4ee3\u7801\uff0c\u7531\u4e8e KaTeX \u5bf9\u4e8e\u683c\u5f0f\u8981\u6c42\u4e0d\u4e00\u822c\u7684\u9ad8\uff0c\u4f7f\u5f97\u6211\u8c03\u4e86\u534a\u4e2a\u5c0f\u65f6\u624d\u8c03\u597d\u3002</p> <p>\u4e0d\u8fc7\u6709\u4e86 Markdown \u5c31\u65b9\u4fbf\u4e86\uff0c\u4eca\u5929\u628a\u5927\u5bb6\u7684\u4e2a\u4eba\u4e3b\u9875\u505a\u6210\u4e86 Markdown \u5d4c\u5165\u7684\uff0c\u76ee\u524d\u662f\u76f4\u63a5\u6293\u53d6\u7684\u6d1b\u8c37\u4e0a\u7684\u6e90\u7801\u3002</p> <p>\u54e6\u5bf9\u4e86\uff0c\u9ec4\u5ddd\u94ed \u5b89\u96e8\u59d0\u59d0 \u8fd8\u544a\u8bc9\u4e86\u6211 benben.sbs \u7684\u5947\u5999\u7f51\u5740\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/","title":"\u9898\u89e3","text":"<p>\u9898\u89e3\uff0c\u5373\u9898\u76ee\u89e3\u6cd5\uff0c\u662f\u8bb2\u89e3\u9898\u76ee\u601d\u8def\u4e0e\u6b63\u786e\u4ee3\u7801\u7684\u6587\u672c\u3002\u5728\u8fd9\u4e2a\u677f\u5757\uff0c\u6211\u6536\u5f55\u4e86\u6240\u6709\u6211\u5199\u7684\u9898\u89e3\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AB4279%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BB%84%E5%9B%BD%E8%B5%9B%202023%5D%20%E6%95%B0%E7%8B%AC%E5%A1%AB%E6%95%B0/","title":"\u9898\u89e3\uff1aB4279 [\u84dd\u6865\u676f\u9752\u5c11\u5e74\u7ec4\u56fd\u8d5b 2023] \u6570\u72ec\u586b\u6570","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AB4279%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BB%84%E5%9B%BD%E8%B5%9B%202023%5D%20%E6%95%B0%E7%8B%AC%E5%A1%AB%E6%95%B0/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AB4279%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BB%84%E5%9B%BD%E8%B5%9B%202023%5D%20%E6%95%B0%E7%8B%AC%E5%A1%AB%E6%95%B0/#\u9898\u76ee\u5927\u610f","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u9898\u76ee\u7ed9\u5b9a\u4e00\u4e2a\u672a\u5b8c\u6210\u7684\u6570\u72ec\uff08\u7528 <code>.</code> \u8868\u793a\u7a7a\u683c\uff09\uff0c\u4fdd\u8bc1\u6709\u552f\u4e00\u89e3\uff0c\u8981\u6c42\u8f93\u51fa\u586b\u5b8c\u540e\u7684\u6570\u72ec\u3002</p> <p>\u5fd8\u8bb0\u6570\u72ec\u89c4\u5219\u7684<sub>~\u548c\u4e0d\u4f1a\u73a9\u6570\u72ec\u7684</sub>~\u770b\u8fc7\u6765\uff1a</p> <p>\u6570\u72ec\u9700\u8981\u73a9\u5bb6\u5728\u4e00\u4e2a \\(9 \\times 9\\) \u7684\u7f51\u683c\u4e2d\u586b\u5165\u6570\u5b57 \\(1 \\sim 9\\)\uff0c\u4f7f\u5f97\uff1a</p> <ol> <li>\u6bcf\u4e00\u884c\u5305\u542b \\(1 \\sim 9\\) \u4e14\u4e0d\u91cd\u590d\uff1b</li> <li>\u6bcf\u4e00\u5217\u5305\u542b \\(1 \\sim 9\\) \u4e14\u4e0d\u91cd\u590d\uff1b</li> <li>\u6bcf\u4e00\u4e2a \\(3 \\times 3\\) \u7684\u683c\u5b50\u5305\u542b \\(1 \\sim 9\\) \u4e14\u4e0d\u91cd\u590d\u3002</li> </ol>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AB4279%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BB%84%E5%9B%BD%E8%B5%9B%202023%5D%20%E6%95%B0%E7%8B%AC%E5%A1%AB%E6%95%B0/#\u7b97\u6cd5","title":"\u7b97\u6cd5","text":"<p>\u6ce8\u610f\u5230\uff0c\u7b97\u6cd5\u6807\u7b7e\u8bf4\u660e\u8fd9\u662f\u4e00\u9053 DFS \u9898\uff0c</p> <p>\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 DFS \u904d\u5386\u5e76\u679a\u4e3e\u6bcf\u4e00\u4e2a\u7a7a\u683c\u6240\u586b\u7684\u6570\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u5408\u6cd5\u3002</p> <p>\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u4eec\u7528\u7684\u7b97\u6cd5\u5c31\u4f1a\u662f DFS\uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u5566\uff0c\u4e5f\u5c31\u53d8\u6210\u4e86\u4e00\u9053\u6a59\u9898\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AB4279%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BB%84%E5%9B%BD%E8%B5%9B%202023%5D%20%E6%95%B0%E7%8B%AC%E5%A1%AB%E6%95%B0/#\u4ee3\u7801","title":"\u4ee3\u7801","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AB4279%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BB%84%E5%9B%BD%E8%B5%9B%202023%5D%20%E6%95%B0%E7%8B%AC%E5%A1%AB%E6%95%B0/#cc","title":"C/C++\uff1a","text":"<p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n\nchar board[9][9];\nbool solved = false;\n\nbool isValid(int row, int col, char num) {\n    for (int i = 0; i &lt; 9; i++) {\n        if (board[row][i] == num) {\n            return false;\n        }\n    }\n    for (int i = 0; i &lt; 9; i++) {\n        if (board[i][col] == num) {\n            return false;\n        }\n    }\n    int boxRow = row / 3 * 3;\n    int boxCol = col / 3 * 3;\n    for (int i = 0; i &lt; 3; i++) {\n        for (int j = 0; j &lt; 3; j++) {\n            if (board[boxRow + i][boxCol + j] == num) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvoid dfs(int row, int col) {\n    if (row == 9) {\n        solved = true;\n        return;\n    }\n    if (col == 9) {\n        dfs(row + 1, 0);\n        return;\n    }\n    if (board[row][col] != '.') {\n        dfs(row, col + 1);\n        return;\n    }\n    for (char num = '1'; num &lt;= '9'; num++) {\n        if (isValid(row, col, num)) {\n            board[row][col] = num;\n            dfs(row, col + 1);\n            if (solved) {\n                return;\n            }\n            board[row][col] = '.';\n        }\n    }\n}\n\nint main() {\n    for (int i = 0; i &lt; 9; i++) {\n        for (int j = 0; j &lt; 9; j++) {\n            scanf(\"%c\", &amp;board[i][j]);\n        }\n        getchar(); // \u5403\u6362\u884c\n    }\n    dfs(0, 0);\n    for (int i = 0; i &lt; 9; i++) {\n        for (int j = 0; j &lt; 9; j++) {\n            printf(\"%c\", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n</code></pre> \u5176\u4ed6\u8bed\u8a00\uff08C#\uff0cJava\uff0cPython\uff09</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12218%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E5%9B%BD%20Java%20B%5D%20%E7%8E%A9%E5%85%B7/","title":"\u9898\u89e3\uff1aP12218 [\u84dd\u6865\u676f 2023 \u56fd Java B] \u73a9\u5177","text":"<p>\\(\\mathbf{upd\\ 2025/5/31}\\)\uff1a\u4fee\u6b63\u6807\u70b9\uff0c\u4fee\u6b63\u8bed\u75c5\u4e0e\u5c0f\u903b\u8f91\u95ee\u9898\uff0c\u4fee\u6b63 \\(\\LaTeX\\) \u4e2d\u4f7f\u7528\u7b26\u53f7\u7684\u4e0d\u5f53\u4e4b\u5904\uff0c\u51cf\u5c11\u4e86\u4e00\u4e9b\u6ca1\u5fc5\u8981\u7684\u5570\u55e6\u8bdd\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12218%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E5%9B%BD%20Java%20B%5D%20%E7%8E%A9%E5%85%B7/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12218%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E5%9B%BD%20Java%20B%5D%20%E7%8E%A9%E5%85%B7/#\u601d\u8def","title":"\u601d\u8def","text":"<p>\u5728\u5199\u8fd9\u9053\u9898\u7684\u4ee3\u7801\u4e4b\u524d\uff0c\u6211\u6ce8\u610f\u5230\uff0c\u65e2\u7136\u8981\u4f7f\u6743\u91cd\u548c\u6700\u5c0f\uff0c\u90a3\u5c31\u4e0d\u80fd\u8ba9\u5927\u7684\u548c\u5927\u7684\uff08\u6743\u91cd\uff09\u76f8\u4e58\uff0c\u5c0f\u7684\u548c\u5c0f\u7684\uff08\u6743\u91cd\uff09\u76f8\u4e58\uff0c\u6700\u540e\u518d\u52a0\u8d77\u6765\uff0c\u8fd9\u4e2a\u601d\u8def\u662f\u6b63\u786e\u7684\u3002\\(%#### \u5373\uff1a\\)\\(%#### 1. \u5c0f\u7684\u4e58\u5c0f\u7684\u3001\u5927\u7684\u4e58\u5927\u7684\u7b56\u7565\uff1a\\)\\(%\u5982\u679c\u6211\u4eec\u6309\u7167\u201c\u5c0f\u7684\u4e58\u5c0f\u7684\u201d\u7684\u7b56\u7565\uff0c\u5c06\u8f83\u5c0f\u7684\u96f6\u4ef6\u914d\u5bf9\uff0c\u4f1a\u5bfc\u81f4\u8f83\u5927\u7684\u6743\u91cd\u503c\u88ab\u76f4\u63a5\u7d2f\u52a0\u5230\u603b\u548c\u4e2d\u3002\\)\\(%#### 2. \u5c0f\u7684\u4e58\u5927\u7684\u7b56\u7565\uff1a\\)\\(%\u5982\u679c\u6211\u4eec\u91c7\u7528\u201c\u5c0f\u7684\u4e58\u5927\u7684\u201d\u7684\u7b56\u7565\uff0c\u5c06\u6700\u5c0f\u7684\u96f6\u4ef6\u4e0e\u6700\u5927\u7684\u96f6\u4ef6\u914d\u5bf9\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u5e73\u8861\u6743\u91cd\u7684\u8d21\u732e\u3002\u56e0\u4e3a\u8f83\u5c0f\u7684\u96f6\u4ef6\u4e0e\u8f83\u5927\u7684\u96f6\u4ef6\u76f8\u4e58\uff0c\u5176\u7ed3\u679c\u4f1a\u6bd4\u4e24\u4e2a\u8f83\u5927\u7684\u96f6\u4ef6\u76f8\u4e58\u66f4\u5c0f\u3002\\)</p> <p>\u2014\u2014\u4e3a\u4ec0\u4e48\uff1f\u6211\u4eec\u6765\u770b\u4e00\u770b\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u770b\u6837\u4f8b\u8bf4\u660e\u7684\u64cd\u4f5c\uff08\u7b56\u7565\uff09\uff0c\u53d1\u73b0\u6709\u8fd9\u6837\u7684\u89c4\u5f8b\u3002</p> <p>\u90a3\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770b\u7b80\u5355\u60c5\u51b5\u3002</p> <p>\u9996\u5148\uff0c\u8bbe\u6709\u56db\u4e2a\u96f6\u4ef6\u91cd\u91cf \\(a \\le b \\le c \\le d\\)\uff0c\u6211\u4eec\u6bd4\u8f83\u4e24\u79cd\u914d\u5bf9\u65b9\u5f0f\u7684\u6743\u91cd\u548c\uff1a</p> <p>1.\u5c0f\u7684\u4e58\u5c0f\u7684\u3001\u5927\u7684\u4e58\u5927\u7684\uff1a</p> \\[ (a \\times b) + (c \\times d) \\] <p>2.\u5c0f\u7684\u4e58\u5927\u7684\uff1a</p> \\[ (a \\times d) + (b \\times c) \\] <p>\u6211\u4eec\u77e5\u9053\uff0c\u6bd4\u5927\u5c0f\uff0c\u53ea\u8981\u770b\u76f8\u51cf\u4e4b\u540e\uff0c\u5f0f\u5b50\u662f\u6b63\u662f\u8d1f\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u6240\u4ee5\uff0c\u8ba9\u6211\u4eec\u5c55\u5f00\u5e76\u6bd4\u8f83 \\((a \\times b) + (c \\times d)\\) \u4e0e \\((a \\times d) + (b \\times c)\\) \u7684\u5dee\u503c\uff0c</p> <p>\u4e3a\uff1a</p> \\[ (a \\times b) + (c \\times d) - (a \\times d) - (b \\times c) = (a \\times b) + (c \\times d) - (a \\times d) - (b \\times c) \\] <p>\u4e0d\u5b8c\u5168\u5316\u7b80\u5f97\uff1a</p> \\[ (a \\times b) + (c \\times d) - (a \\times d) - (b \\times c) = (a - c) \\times (b - d) \\] <p>\u7531\u4e8e</p> \\[ a \\le b \\le c \\le d \\] <p>\u6240\u4ee5 \\((a - c)\\) \u548c \\((b - d)\\) \u5747\u4e3a\u975e\u6b63\u6570\uff0c\u5b83\u4eec\u7684\u4e58\u79ef \\((a - c) \\times (b - d)\\) \u4e3a\u975e\u8d1f\u6570\u3002</p> <p>\u5373\uff1a</p> \\[ \\because(a - c) \\le 0,(b - d) \\le 0 \\] \\[ \\therefore (a - c) \\times (b - d) \\ge 0 \\] <p>\u53c8</p> \\[ (a \\times b) + (c \\times d) - (a \\times d) - (b \\times c) = (a - c) \\times (b - d) \\] <p>\u56e0\u6b64\uff1a</p> \\[ (a \\times b) + (c \\times d) \\ge (a \\times d) + (b \\times c) \\] <p>\u8fd9\u8868\u660e\uff0c\u5728\u96f6\u4ef6\u4e2a\u6570\u4e3a \\(4\\) \u65f6\uff0c\u201c\u5c0f\u7684\u4e58\u5927\u7684\u201d\u7684\u7b56\u7565\u603b\u662f\u4f18\u4e8e\u201c\u5c0f\u7684\u4e58\u5c0f\u7684\u3001\u5927\u7684\u4e58\u5927\u7684\u201d\u7684\u7b56\u7565\u3002</p> <p>\u63a5\u7740\uff0c\u6211\u4eec\u4e0d\u65ad\u62d3\u5bbd\uff1a\\(8\\) \u4e2a\u96f6\u4ef6\u3001\\(12\\) \u4e2a\u96f6\u4ef6\u3001\\(16\\) \u4e2a\u96f6\u4ef6\u7b49\u3002</p> <p>\u540c\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5f53 \\(n\\) \u53d6\u5947\u6570\u65f6\uff0c\u7b2c \\((n+1) \\div 2\\) \u7ec4\u521a\u597d\u662f\u4e2d\u95f4\u7684\u90a3\u4e00\u7ec4\u3002 \u8fd9\u65f6\uff0c\u65e0\u8bba\u6211\u4eec\u9009\u7528\u201c\u5c0f\u7684\u4e58\u5c0f\u7684\u3001\u5927\u7684\u4e58\u5927\u7684\u201d\u8fd8\u662f\u201c\u5c0f\u7684\u4e58\u5927\u7684\u201d\u7684\u7b56\u7565\uff0c\u7b2c \\((n+1) \\div 2\\) \u7ec4\u603b\u662f\u76f8\u7b49\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7ec4\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u4e2d\u95f4\u7684\u4e00\u7ec4\uff0c\u5e76\u628a\u5b83\u4f5c\u4e3a\u7ec4\u6570\u4e3a\u5076\u6570\uff0c\u5373\u96f6\u4ef6\u4e2a\u6570\u4e3a \\(4\\) \u7684\u500d\u6570\u7684\u60c5\u51b5\u6765\u5904\u7406\u3002</p> <p>\u56e0\u6b64\uff0c\u201c\u5c0f\u7684\u4e58\u5927\u7684\u201d\u7684\u7b56\u7565\u603b\u662f\u4f18\u4e8e\u201c\u5c0f\u7684\u4e58\u5c0f\u7684\u3001\u5927\u7684\u4e58\u5927\u7684\u201d\u7684\u7b56\u7565\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12218%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E5%9B%BD%20Java%20B%5D%20%E7%8E%A9%E5%85%B7/#\u7b97\u6cd5","title":"\u7b97\u6cd5\uff1a","text":"<p>\u660e\u767d\u4e86\u4e0a\u9762\u7684\u5185\u5bb9\uff0c\u63a5\u4e0b\u6765\u627e\u6211\u4eec\u8981\u4f7f\u7528\u7684\u7b97\u6cd5\u5c31\u5f88\u7b80\u5355\u4e86\u3002</p> <p>\u67e5\u770b\u7b97\u6cd5\u6807\u7b7e\uff0c\u53d1\u73b0\u7b97\u6cd5\u4e3a\u201c\u8d2a\u5fc3\u201d\u3001\u201c\u6392\u5e8f\u201d\u548c\u201c\u53cc\u6307\u9488 two-pointer\u201d\uff0c\u6240\u4ee5\u7b97\u6cd5\u5c31\u662f\u7528\u8fd9\u4e24\u4e2a\u3002 </p> <p>\u7531\u4e8e\u6211\u4eec\u8fd9\u91cc\u8981\u4e00\u5b9a\u4f7f\u5c0f\u7684\u4e58\u5927\u7684\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u8d2a\u5fc3\u7684\u7b97\u6cd5\u3002\u53c8\u56e0\u4e3a\u6211\u4eec\u8981\u77e5\u9053\u4ec0\u4e48\u662f\u5c0f\u7684\uff0c\u4ec0\u4e48\u662f\u5927\u7684\uff0c\u6211\u4eec\u5c31\u9700\u8981\u901a\u8fc7\u6392\u5e8f\uff0c\u4f7f\u5c0f\u7684\u5206\u5e03\u5728\u6700\u524d\u9762\uff0c\u5927\u7684\u5206\u5e03\u5728\u6700\u540e\u9762\u3002\u540c\u65f6\uff0c\u5df2\u7ecf\u7528\u8fc7\u7684\u79ef\u6728\u4e0d\u80fd\u88ab\u7b2c\u4e8c\u6b21\u4f7f\u7528\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u53cc\u6307\u9488\u6765\u5224\u65ad\u6211\u4eec\u73b0\u5728\u6b63\u5728\u8ba1\u7b97\u7684\u79ef\u6728\u7684\u91cd\u91cf\u7684\u4e0b\u6807\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12218%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E5%9B%BD%20Java%20B%5D%20%E7%8E%A9%E5%85%B7/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"<p>\u7531\u4e8e\u6743\u91cd\u662f\u5f88\u591a\u6570\u7684\u4e58\u79ef\u7684\u548c\uff0c\u6240\u4ee5\u4e0d\u8981\u5fd8\u4e86\u628a\u6570\u636e\u7c7b\u578b\u5f00\u5927\u4e00\u70b9\u3002\u6211\u4ee4\u603b\u6743\u91cd\u4e3acnt\uff0c\u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u6700\u5dee\u60c5\u51b5\uff1a\u5f53 \\(n\\) \u6700\u5927\uff0c\\(m_i\\)\u3001\\(m_j\\) \u6700\u5927\u65f6\uff0c\\(cnt=n\\times(m_i \\times m_j) = 10^5 \\times 10^5 \\times 10^5 = 10^{15}\\)\u3002\u5b83\u8d85\u8fc7\u4e86 <code>int</code> \u7c7b\u578b\u7684\u6700\u5927\u503c\uff08\\(%2^{31}-1\uff0c\\)\u7ea6 \\(2.14748\\times10 ^ 9\\)\uff09\uff0c\u800c <code>long long</code> \u7c7b\u578b\u5219\u53ef\u4ee5\u8bb0\u5f55\uff08\\(%2^{63}-1\uff0c\\)\u7ea6 \\(9.22337\\times10 ^ {18}\\)\uff09\u3002\u53c8\u56e0\u4e3a\u6743\u91cd\u90fd\u4e3a\u975e\u8d1f\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u65e0\u7b26\u53f7\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u53ef\u4ee5\u9009\u7528\u7684\u6570\u636e\u7c7b\u578b\uff08C \u4e0e C++ \u73af\u5883\u4e0b\uff09\u6709 <code>unsigned int</code>\u3001<code>long long</code>\u3001<code>unsigned long long</code>\u3002</p> <p>\u6700\u540e\u7b80\u5355\u9644\u4e0a\u6211\u7684\u4ee3\u7801\uff1a</p> C++C#JavaPython <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nlong long n, w[200005], cnt = 0; // cnt \u8868\u793a\u6743\u91cd\nint main(){\n    scanf(\"%lld\", &amp;n); \n    for(int i = 0; i &lt; 2 * n; i++)\n        scanf(\"%d\", &amp;w[i]); \n    sort(w, w+(2*n)); \n    int i = 0, j = 2*n-1; \n    while(i &lt; j){ \n        cnt += w[i] * w[j]; \n        i++, j--;\n    }\n    printf(\"%lld\", cnt); \n    return 0;\n}\n</code></pre> <pre><code>using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        long n = int.Parse(Console.ReadLine()); \n        long[] w = Console.ReadLine().Split().Select(long.Parse).ToArray(); \n        Array.Sort(w); \n        long cnt = 0; // \u6743\u91cd\n        long i = 0, j = 2 * n - 1; \n        while (i &lt; j) \n        {\n            cnt += w[i] * w[j]; \n            i++;\n            j--;\n        }\n        Console.WriteLine(cnt); \n    }\n}\n</code></pre> <pre><code>import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long n = sc.nextLong(); \n        long[] w = new long[(int)(2 * n)]; \n        for (int i = 0; i &lt; 2 * n; i++) {\n            w[i] = sc.nextLong(); \n        }\n        Arrays.sort(w); \n        long cnt = 0; // \u6743\u91cd\n        int i = 0, j = (int)(2 * n) - 1; \n        while (i &lt; j) { \n            cnt += w[i] * w[j]; \n            i++;\n            j--;\n        }\n        System.out.println(cnt); \n        sc.close();\n    }\n}\n</code></pre> <pre><code>import sys\nn = int(input())  \nw = list(map(int, input().split()))  \nw.sort()  \ncnt = 0  # \u6743\u91cd\ni, j = 0, 2 * n - 1  \nwhile i &lt; j:  \n    cnt += w[i] * w[j]  \n    i += 1\n    j -= 1\nprint(cnt)  \n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/","title":"\u9898\u89e3\uff1aP12280 [\u84dd\u6865\u676f 2024 \u56fd Python A] \u7279\u522b\u7684\u6570\u7ec4","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/#\u4e3b\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u4e3b\u601d\u8def\u4e0e\u7b97\u6cd5","text":"<p>\u9996\u5148\uff0c\u9898\u76ee\u8981\u6c42\u7684\u662f\u79fb\u9664\u4e00\u4e2a\u533a\u95f4\u540e\u5269\u4e0b\u7684\u5143\u7d20\u5fc5\u987b\u5168\u90e8\u552f\u4e00\u3002\u90a3\u4e48\u6700\u5927\u7684\u5269\u4f59\u957f\u5ea6\u5c31\u662f\u539f\u957f\u5ea6\u51cf\u53bb\u88ab\u79fb\u9664\u533a\u95f4\u7684\u957f\u5ea6\u3002\u6240\u4ee5\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u627e\u5230\u6700\u5c0f\u7684\u9700\u8981\u79fb\u9664\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u8fd9\u6837\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u6700\u957f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u76ee\u6807\u5e94\u8be5\u662f\u627e\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u6700\u5c0f\u7684\u533a\u95f4\uff0c\u5f53\u79fb\u9664\u5b83\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002</p> <p>\u90a3\u600e\u4e48\u627e\u5230\u8fd9\u4e2a\u6700\u5c0f\u7684\u533a\u95f4\u5462\uff1f\u76f4\u63a5\u60f3\u5230\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u80fd\u786e\u5b9a\u54ea\u4e9b\u5143\u7d20\u662f\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u79fb\u9664\u7684\u533a\u95f4\u5fc5\u987b\u8986\u76d6\u6240\u6709\u91cd\u590d\u5143\u7d20\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u5143\u7d20\u4e0d\u518d\u91cd\u590d\u3002\u4f46\u8fd9\u4f3c\u4e4e\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u4e2a\u91cd\u590d\u5143\u7d20\u5206\u5e03\u5728\u6570\u7ec4\u7684\u4e0d\u540c\u4f4d\u7f6e\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u601d\u8003\uff0c\u5982\u4f55\u9ad8\u6548\u5730\u627e\u5230\u8fd9\u4e2a\u6700\u5c0f\u7684\u79fb\u9664\u533a\u95f4\u5462\uff1f\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684L\u548cR\u663e\u7136\u4e0d\u53ef\u884c\uff0c\u56e0\u4e3a\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u662f \\(O(n^2)\\)\uff0c\u5bf9\u4e8e \\(n = 1 \\times 10^5\\) \u7684\u60c5\u51b5\uff0c\u8fd9\u5b8c\u5168\u65e0\u6cd5\u5904\u7406\u3002</p> <p>\u8fd9\u65f6\u5019\uff0c\u60f3\u5230\u6ed1\u52a8\u7a97\u53e3\uff08\u53cc\u6307\u9488\uff09\u7684\u65b9\u6cd5\u3002\u6ed1\u52a8\u7a97\u53e3\u901a\u5e38\u7528\u6765\u5904\u7406\u5b50\u6570\u7ec4\u6216\u5b50\u533a\u95f4\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u6d89\u53ca\u8fde\u7eed\u5143\u7d20\u7684\u60c5\u51b5\u3002\u90a3\u4e48\uff0c\u8fd9\u91cc\u7684\u95ee\u9898\u662f\u5426\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6ed1\u52a8\u7a97\u53e3\u7684\u95ee\u9898\uff1f</p> <p>\u6ed1\u52a8\u7a97\u53e3\u7684\u6838\u5fc3\u601d\u60f3\u662f\u7ef4\u62a4\u4e00\u4e2a\u7a97\u53e3\uff0c\u4f7f\u5f97\u7a97\u53e3\u5185\u7684\u5143\u7d20\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\uff0c\u800c\u7a97\u53e3\u5916\u7684\u5143\u7d20\u6ee1\u8db3\u53e6\u4e00\u79cd\u6761\u4ef6\u3002\u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e2a\u7a97\u53e3 \\([L, R]\\)\uff0c\u5f53\u79fb\u9664\u8fd9\u4e2a\u7a97\u53e3\u540e\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7a97\u53e3\u5916\u7684\u5143\u7d20\u5fc5\u987b\u5168\u90e8\u552f\u4e00\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u7a97\u53e3\uff0c\u4f7f\u5f97\u5728\u6570\u7ec4\u7684\u5de6\u53f3\u4e24\u90e8\u5206\uff08\u7a97\u53e3\u5de6\u8fb9\u548c\u7a97\u53e3\u53f3\u8fb9\uff09\u4e2d\u7684\u5143\u7d20\u90fd\u6ca1\u6709\u91cd\u590d\u3002\u6216\u8005\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u6574\u4e2a\u6570\u7ec4\u9664\u4e86\u7a97\u53e3\u5185\u7684\u5143\u7d20\u4e4b\u5916\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002</p> <p>\u8fd9\u65f6\u5019\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u5bfb\u627e\u4e00\u4e2a\u7a97\u53e3\uff0c\u4f7f\u5f97\u7a97\u53e3\u5916\u7684\u5143\u7d20\u90fd\u4e0d\u91cd\u590d\u3002\u627e\u5230\u8fd9\u6837\u7684\u7a97\u53e3\u540e\uff0c\u6211\u4eec\u8981\u627e\u51fa\u5176\u4e2d\u957f\u5ea6\u6700\u5c0f\u7684\u90a3\u4e2a\u7a97\u53e3\uff0c\u8fd9\u6837\u539f\u6570\u7ec4\u957f\u5ea6\u51cf\u53bb\u8fd9\u4e2a\u7a97\u53e3\u957f\u5ea6\u5c31\u662f\u6700\u5927\u7684\u5269\u4f59\u957f\u5ea6\u3002</p> <p>\u4e8e\u662f\uff0c\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u8def\u662f\u53ef\u884c\u7684\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4ece\u6570\u7ec4\u4e2d\u79fb\u9664\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4 \\([L, R]\\)\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u5168\u4e3a\u552f\u4e00\uff0c\u4e14\u5269\u4f59\u90e8\u5206\u5c3d\u53ef\u80fd\u957f\u3002\u76ee\u6807\u8f6c\u5316\u4e3a\u5bfb\u627e\u79fb\u9664\u7684\u6700\u5c0f\u533a\u95f4\u957f\u5ea6\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u552f\u4e00\u3002</p> <p>\u8fd9\u4e2a\u601d\u8def\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff0c\u5982\u4f55\u9ad8\u6548\u5730\u7ef4\u62a4\u7a97\u53e3\u5916\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5e76\u5feb\u901f\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u5728 \\(O(n)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u88ab\u5de6\u53f3\u6307\u9488\u5404\u904d\u5386\u4e00\u6b21\uff08\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff09\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/#\u526f\u7b97\u6cd5","title":"\u526f\u7b97\u6cd5","text":"<ul> <li>\u54c8\u5e0c\u8868\u6a21\u62df\uff1a\u901a\u8fc7\u6570\u7ec4 \\(cnt\\) \u76f4\u63a5\u7d22\u5f15\u5143\u7d20\u503c\uff0c\u7edf\u8ba1\u9891\u7387\uff0c\u907f\u514d\u590d\u6742\u6570\u636e\u7ed3\u6784\u3002</li> </ul>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"<p>\u9996\u5148\u7edf\u8ba1\u6574\u4e2a\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5982\u679c\u539f\u6570\u7ec4\u5df2\u7ecf\u662f\u6240\u6709\u5143\u7d20\u552f\u4e00\u7684\uff08\u7279\u6b8a\u60c5\u51b5\uff09\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u76f4\u63a5\u8fd4\u56de \\(n\\)\u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u6700\u5c0f\u7684\u7a97\u53e3 \\([L, R]\\)\uff0c\u4f7f\u5f97\u79fb\u9664\u8fd9\u4e2a\u7a97\u53e3\u540e\u5269\u4e0b\u7684\u5143\u7d20\u552f\u4e00\u3002</p> <p>\u63a5\u7740\uff0c\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u6cd5\uff0c\u7ef4\u62a4\u5de6\u53f3\u6307\u9488\uff0c\u4ee5\u53ca\u7a97\u53e3\u5916\u7684\u5143\u7d20\u7684\u9891\u7387\u8868\u3002\u6211\u4eec\u8fd9\u91cc\u547d\u540d\u4e00\u4e2a\u53d8\u91cf \\(over-cnt\\)\uff0c\u8868\u793a\u7a97\u53e3\u5916\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7 \\(1\\)\u3002\u53f3\u6307\u9488\u4e0d\u65ad\u53f3\u79fb\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u79fb\u51fa\u7a97\u53e3\u5916\uff08\u5373\u5176\u9891\u7387\u51cf \\(1\\)\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u64cd\u4f5c\u5bfc\u81f4\u8be5\u5143\u7d20\u7684\u9891\u7387\u4ece \\(2\\) \u53d8\u4e3a \\(1\\) \uff0c\u90a3\u4e48 \\(over_cnt\\) \u51cf \\(1\\)\uff0c\u56e0\u4e3a\u8be5\u5143\u7d20\u5728\u7a97\u53e3\u5916\u4e0d\u518d\u91cd\u590d\u3002</p> <p>\u5f53 \\(over-cnt\\) \u53d8\u4e3a \\(0\\) \u65f6\uff0c\u8bf4\u660e\u7a97\u53e3\u5916\u7684\u5143\u7d20\u6ca1\u6709\u91cd\u590d\u3002\u6b64\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u6307\u9488\uff0c\u79fb\u52a8\u5de6\u6307\u9488\uff0c\u5c06\u5143\u7d20\u91cd\u65b0\u52a0\u5165\u7a97\u53e3\u5916\uff08\u5373\u5176\u9891\u7387\u52a0 \\(1\\)\uff09\u3002\u5982\u679c\u67d0\u4e2a\u5143\u7d20\u7684\u9891\u7387\u4ece \\(1\\) \u53d8\u4e3a \\(2\\)\uff0c\u5219 \\(over-cnt\\) \u52a0 \\(1\\)\uff0c\u6b64\u65f6\u505c\u6b62\u6536\u7f29\uff0c\u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u7684\u957f\u5ea6\u662f\u5426\u4e3a\u6700\u5c0f\u503c\u3002</p> <p>\u6700\u7ec8\uff0c\u627e\u5230\u6700\u5c0f\u7684\u7a97\u53e3\u957f\u5ea6\uff0c\u539f\u6570\u7ec4\u957f\u5ea6\u51cf\u53bb\u8fd9\u4e2a\u957f\u5ea6\u5c31\u662f\u7b54\u6848\u3002</p> <p>\u6211\u4eec\u9700\u8981\u4ece\u6570\u7ec4\u4e2d\u79fb\u9664\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4 \\([L, R]\\)\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u5168\u4e3a\u552f\u4e00\uff0c\u4e14\u5269\u4f59\u90e8\u5206\u5c3d\u53ef\u80fd\u957f\u3002\u76ee\u6807\u8f6c\u5316\u4e3a\u5bfb\u627e\u79fb\u9664\u7684\u6700\u5c0f\u533a\u95f4\u957f\u5ea6\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u552f\u4e00\u3002</p> <p>\u6700\u540e\u732e\u4e0a\u6211\u7684\u51e0\u7bc7\u4ee3\u7801\uff1a</p> C++C#JavaPython <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXN = 1e5 + 5;\nint a[MAXN];\nint cnt[MAXN * 2];\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    // \u7edf\u8ba1\u5168\u5c40\u9891\u7387\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; a[i];\n        cnt[a[i]]++;\n    }\n    // \u8ba1\u7b97\u521d\u59cb\u91cd\u590d\u5143\u7d20\u79cd\u7c7b\u6570\n    int over_cnt = 0;\n    for (int i = 0; i &lt; MAXN * 2; ++i) {\n        if (cnt[i] &gt; 1) over_cnt++;\n    }\n    // \u82e5\u6570\u7ec4\u672c\u8eab\u65e0\u91cd\u590d\uff0c\u76f4\u63a5\u8fd4\u56de\n    if (over_cnt == 0) {\n        cout &lt;&lt; n;\n        return 0;\n    }\n    int min_win = n;\n    int left = 0;\n    for (int right = 0; right &lt; n; ++right) {\n        int x = a[right];\n        cnt[x]--; // \u79fb\u51fa\u7a97\u53e3\u5916\uff08\u4fdd\u7559\u8be5\u5143\u7d20\uff09\n        if (cnt[x] == 1)\n            over_cnt--;\n        // \u5f53\u7a97\u53e3\u5916\u65e0\u91cd\u590d\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u8fb9\u754c\n        while (over_cnt == 0 &amp;&amp; left &lt;= right) {\n            min_win = min(min_win, right - left + 1);\n            int y = a[left];\n            cnt[y]++; // \u5c06\u5143\u7d20\u79fb\u56de\u7a97\u53e3\u5916\uff08\u79fb\u9664\u8be5\u5143\u7d20\uff09\n            if (cnt[y] == 2)\n                over_cnt++;\n            left++;\n        }\n    }\n    cout &lt;&lt; n - min_win;\n    return 0;\n}\n</code></pre> <pre><code>using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        const int MAXN = 100005 * 2;\n        int n = int.Parse(Console.ReadLine());\n        string[] input = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(input, int.Parse);\n        int[] cnt = new int[MAXN];\n        // \u7edf\u8ba1\u6240\u6709\u5143\u7d20\u9891\u7387\n        foreach (int x in a)\n        {\n            cnt[x]++;\n        }\n        // \u8ba1\u7b97\u521d\u59cb\u91cd\u590d\u5143\u7d20\u79cd\u7c7b\u6570\n        int over_cnt = 0;\n        for (int i = 0; i &lt; MAXN; i++)\n        {\n            if (cnt[i] &gt; 1) over_cnt++;\n        }\n        // \u82e5\u6570\u7ec4\u672c\u8eab\u65e0\u91cd\u590d\uff0c\u76f4\u63a5\u8fd4\u56de\n        if (over_cnt == 0)\n        {\n            Console.WriteLine(n);\n            return;\n        }\n        int min_win = n;\n        int left = 0;\n        for (int right = 0; right &lt; n; right++)\n        {\n            int x = a[right];\n            cnt[x]--; // \u79fb\u51fa\u7a97\u53e3\u5916\uff08\u4fdd\u7559\u8be5\u5143\u7d20\uff09\n            if (cnt[x] == 1) over_cnt--;\n            // \u5f53\u7a97\u53e3\u5916\u65e0\u91cd\u590d\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u8fb9\u754c\n            while (over_cnt == 0 &amp;&amp; left &lt;= right)\n            {\n                min_win = Math.Min(min_win, right - left + 1);\n                int y = a[left];\n                cnt[y]++; // \u5c06\u5143\u7d20\u79fb\u56de\u7a97\u53e3\u5916\uff08\u79fb\u9664\u8be5\u5143\u7d20\uff09\n                if (cnt[y] == 2) over_cnt++;\n                left++;\n            }\n        }\n        Console.WriteLine(n - min_win);\n    }\n}\n</code></pre> <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        final int MAXN = 100005 * 2;\n        Scanner scanner = new Scanner(System.in);\n        int n = Integer.parseInt(scanner.nextLine());\n        String[] input = scanner.nextLine().split(\" \");\n        int[] a = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();\n        int[] cnt = new int[MAXN];\n        // \u7edf\u8ba1\u6240\u6709\u5143\u7d20\u9891\u7387\n        for (int x : a) {\n            cnt[x]++;\n        }\n        // \u8ba1\u7b97\u521d\u59cb\u91cd\u590d\u5143\u7d20\u79cd\u7c7b\u6570\n        int overCnt = 0;\n        for (int i = 0; i &lt; MAXN; i++) {\n            if (cnt[i] &gt; 1) overCnt++;\n        }\n        // \u82e5\u6570\u7ec4\u672c\u8eab\u65e0\u91cd\u590d\uff0c\u76f4\u63a5\u8fd4\u56de\n        if (overCnt == 0) {\n            System.out.println(n);\n            return;\n        }\n        int minWin = n;\n        int left = 0;\n        for (int right = 0; right &lt; n; right++) {\n            int x = a[right];\n            cnt[x]--; // \u79fb\u51fa\u7a97\u53e3\u5916\uff08\u4fdd\u7559\u8be5\u5143\u7d20\uff09\n            if (cnt[x] == 1) overCnt--;\n            // \u5f53\u7a97\u53e3\u5916\u65e0\u91cd\u590d\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u8fb9\u754c\n            while (overCnt == 0 &amp;&amp; left &lt;= right) {\n                minWin = Math.min(minWin, right - left + 1);\n                int y = a[left];\n                cnt[y]++; // \u5c06\u5143\u7d20\u79fb\u56de\u7a97\u53e3\u5916\uff08\u79fb\u9664\u8be5\u5143\u7d20\uff09\n                if (cnt[y] == 2) overCnt++;\n                left++;\n            }\n        }\n        System.out.println(n - minWin);\n    }\n}\n</code></pre> <pre><code>n = int(input())\na = list(map(int, input().split()))\nfrom collections import defaultdict\ncnt = defaultdict(int)\nfor x in a:\n    cnt[x] += 1\nover_cnt = sum(1 for x in cnt if cnt[x] &gt; 1)\nif over_cnt == 0:\n    print(n)\n    exit()\nmin_win = n\nleft = 0\nfor right in range(n):\n    x = a[right]\n    cnt[x] -= 1\n    if cnt[x] == 1:\n        over_cnt -= 1\n    while over_cnt == 0 and left &lt;= right:\n        current_win = right - left + 1\n        if current_win &lt; min_win:\n            min_win = current_win\n        y = a[left]\n        cnt[y] += 1\n        if cnt[y] == 2:\n            over_cnt += 1\n        left += 1\nprint(n - min_win)\n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/","title":"\u9898\u89e3\uff1aP12289 [\u84dd\u6865\u676f 2024 \u56fd Java A] \u4fee\u6539\u6570\u4f4d","text":"<p>\\(\\mathbf{upd\\ 2025/6/13}\\)\uff1a\u51cf\u5c11\u4e86\u4e00\u4e9b\u5e9f\u8bdd\uff0c\u7cbe\u7b80\u4e86\u6587\u7ae0\u5185\u5bb9\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/#\u9898\u76ee\u5927\u610f","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u9898\u76ee\u8981\u6c42\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(10\\) \u7684\u5b50\u4e32\uff0c\u4f7f\u5f97\u8be5\u5b50\u4e32\u5305\u542b\u4ece \\(0\\) \u5230 \\(9\\) \u7684\u6240\u6709\u6570\u5b57\uff0c\u4e14\u6bcf\u4e2a\u6570\u5b57\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/#\u601d\u8def","title":"\u601d\u8def","text":"<p>\u4e3a\u4e86\u6ee1\u8db3\u8981\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u539f\u6570\u7684\u67d0\u4e9b\u6570\u5b57\uff0c\u4f46\u9700\u8981\u6700\u5c0f\u5316\u4fee\u6539\u7684\u4ee3\u4ef7\uff08\u5373\u4fee\u6539\u7684\u6570\u5b57\u5dee\u503c\u4e4b\u548c\uff09\u3002\u540c\u65f6\uff0c\u4fee\u6539\u540e\u7684\u6570\u4ecd\u9700\u6ee1\u8db3\u6ca1\u6709\u524d\u5bfc\u96f6\u7684\u9650\u5236\u3002</p> <p>\u4e0d\u662f\u6211\u8bf4\uff0c\u6211\u7684\u7b97\u6cd5\u5012\u8fd8\u633a\u66b4\u529b\u7684\u3002</p> <p>\u6211\u7684\u505a\u6cd5\u662f\u73b0\u9009\u51fa\u4e00\u4e2a\u5b57\u4e32\uff0c\u7136\u540e\u518d\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u6876\u6392\u5e8f\u7684\u65b9\u6cd5\u7edf\u8ba1\u6570\u5b57\u4e2a\u6570\u3002\u7531\u4e8e\u8fd9\u91cc\u5b57\u4e32\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u4e14\u662f\u7531\u5de6\u4fa7\u5411\u53f3\u4fa7\u626b\u63cf\uff0c\u5c31\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u5199\u6cd5\u3002</p> <p>\u6bcf\u6b21\u6876\u6392\u5e8f\u7edf\u8ba1\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u80fd\u591f\u5f97\u5230\u54ea\u4e9b\u6570\u5b57\u88ab\u591a\u7b97\u4e86\uff0c\u54ea\u4e9b\u6570\u5b57\u88ab\u5c11\u7b97\u4e86\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u4e0d\u65ad\u4fdd\u8bc1\u88ab\u66ff\u6362\u7684\u7684\u6570\u5b57\u4e0e\u66ff\u6362\u540e\u7684\u6570\u5b57\u4e4b\u5dee\u6700\u5c0f\u5373\u53ef\u3002</p> <p>\u8fd9\u4e2a\u65f6\u5019\u8981\u6ce8\u610f\u4e24\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a 1. \u539f\u4e32\u957f\u5ea6\u5c0f\u4e8e \\(10\\)\uff0c\u4e5f\u5c31\u662f\u8bf4\u6839\u672c\u4e0d\u53ef\u80fd\u51fa\u73b0 \\(10\\) \u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u3002 2. \u5f53\u626b\u63cf\u7b2c\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(10\\) \u7684\u5b57\u4e32\u65f6\uff0c\u8981\u6ce8\u610f\u7b2c\u4e00\u4e2a\u6570\u4e0d\u80fd\u88ab\u4fee\u6539\u4e3a \\(0\\)\uff08\u5373\u4e0d\u80fd\u6709\u524d\u5bfc\u96f6\uff09\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/#\u7b97\u6cd5","title":"\u7b97\u6cd5","text":"<p>\u7531\u7b97\u6cd5\u6807\u7b7e\u53ef\u77e5</p> <p>\u4ece\u4e0a\u9762\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u80fd\u77e5\u9053\u8981\u5199\u4ee5\u4e0b\u51e0\u4e2a\u7b97\u6cd5\uff1a</p> <p>1.\u6ed1\u52a8\u7a97\u53e3\uff1a</p> <p>\u904d\u5386\u957f\u5ea6\u4e3a \\(10\\) \u7684\u6240\u6709\u5b50\u4e32\u3002\u5176\u4e2d\uff0c\u5bf9\u6bcf\u4e2a\u5b50\u4e32\uff0c\u8ba1\u7b97\u5176\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\u3002\u5982\u679c\u662f\uff0c\u5219\u4ee3\u4ef7\u4e3a \\(0\\)\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8ba1\u7b97\u5c06\u5176\u53d8\u4e3a\u4e00\u4e2a\u6392\u5217\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002</p> <p>tip\uff1a\u8fd9\u91cc\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7684\u53cc\u6307\u9488\uff0c\u5b9e\u9645\u4e0a\u662f\u5355\u6307\u9488\u3002</p> <p>2.\u6876\u6392\u5e8f\uff1a</p> <p>\u7edf\u8ba1\u6bcf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u8fd8\u505a\u4e86\u4e00\u4e9b\u5176\u4ed6\u7684\u4f18\u5316\uff08\u7c7b\u4f3c\u4e8e KMP\uff1f\uff09\uff1a</p> <p>1.\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff1a</p> <p>\u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u901a\u8fc7\u589e\u91cf\u66f4\u65b0\u9891\u7387\u6570\u7ec4\uff08\u5c31\u662f\u5f53\u5b83\u5f80\u540e\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u52a0\u51cf\u65b0\u8fdb\u5165\u7a97\u53e3\u4e2d\u7684\u6570\u5b57\u4e0e\u79bb\u5f00\u7a97\u53e3\u4e2d\u7684\u6570\u5b57\uff09\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002</p> <p>2.\u6392\u5e8f\uff1a</p> <p>\u5bf9\u4e8e\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6392\u5e8f\u540e\u5339\u914d\uff0c\u786e\u4fdd\u4ee3\u4ef7\u6700\u5c0f\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"<p>\u8fd9\u91cc\u732e\u4e0a\u81ea\u5df1\u7684\u4ee3\u7801\uff08Python \u8d85\u65f6\u4e86\uff0c\u5c31\u4e0d\u653e\u51fa\u6765\u4e86\uff09\uff1a</p> C++C#Java <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    string m_str;\n    cin &gt;&gt; m_str;\n    int n = m_str.size();\n    if (n &lt; 10) {\n        cout &lt;&lt; -1 &lt;&lt; endl;\n        return 0;\n    }\n    int min_cost = INT_MAX;\n    // \u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\n    for (int i = 0; i &lt;= n - 10; i++) {\n        string window = m_str.substr(i, 10);\n        int freq[10] = {0};\n        // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n        for (char d : window) {\n            freq[d - '0']++;\n        }\n        // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n        bool is_permutation = true;\n        for (int d = 0; d &lt;= 9; d++) {\n            if (freq[d] != 1) {\n                is_permutation = false;\n                break;\n            }\n        }\n        // \u5982\u679c\u662f\u6392\u5217\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n        if (is_permutation) {\n            cout &lt;&lt; 0 &lt;&lt; endl;\n            return 0;\n        }\n        // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n        char dup[10], miss[10];\n        int dup_cnt = 0, miss_cnt = 0;\n\n        for (int d = 0; d &lt;= 9; d++) {\n            int cnt = freq[d];\n            if (cnt &gt; 1) {\n                for (int j = 1; j &lt; cnt; j++) {\n                    dup[dup_cnt++] = d + '0';\n                }\n            } else if (cnt == 0) {\n                miss[miss_cnt++] = d + '0';\n            }\n        }\n        // \u8ba1\u7b97\u4ee3\u4ef7\n        bool mnz = (window[0] == '0');\n        // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n        int cost = 0;\n        if (mnz) {\n            // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n            bool found = false;\n            for (int j = 0; j &lt; dup_cnt; j++) {\n                if (dup[j] == window[0]) {\n                    char best_d = '0';\n                    int min_diff = INT_MAX;\n                    for (int k = 0; k &lt; miss_cnt; k++) {\n                        if (miss[k] != '0') {\n                            int diff = abs(miss[k] - window[0]);\n                            if (diff &lt; min_diff) {\n                                min_diff = diff;\n                                best_d = miss[k];\n                            }\n                        }\n                    }\n                    if (best_d == '0') {\n                        cost = INT_MAX;\n                        break;\n                    }\n                    cost += min_diff;\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) continue;\n        }\n        // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n        sort(dup, dup + dup_cnt);\n        sort(miss, miss + miss_cnt);\n        for (int j = 0; j &lt; dup_cnt; j++) {\n            cost += abs(miss[j] - dup[j]);\n        }\n        // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n        min_cost = min(min_cost, cost);\n    }\n    cout &lt;&lt; min_cost &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        string m_str = Console.ReadLine();\n        int n = m_str.Length; -1\n        if (n &lt; 10)\n        {\n            Console.WriteLine(-1);\n            return;\n        }\n        int min_cost = int.MaxValue;\n        for (int i = 0; i &lt;= n - 10; i++)\n        {\n            string window = m_str.Substring(i, 10);\n            int[] freq = new int[10];\n            // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n            foreach (char d in window)\n            {\n                freq[d - '0']++;\n            }\n            // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n            bool is_permutation = true;\n            for (int d = 0; d &lt;= 9; d++)\n            {\n                if (freq[d] != 1)\n                {\n                    is_permutation = false;\n                    break;\n                }\n            }\n            // \u5982\u679c\u662f\u6392\u5217\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n            if (is_permutation)\n            {\n                Console.WriteLine(0);\n                return;\n            }\n            // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            char[] dup = new char[10];\n            char[] miss = new char[10];\n            int dup_cnt = 0, miss_cnt = 0;\n            for (int d = 0; d &lt;= 9; d++)\n            {\n                int cnt = freq[d];\n                if (cnt &gt; 1)\n                {\n                    for (int j = 1; j &lt; cnt; j++)\n                    {\n                        dup[dup_cnt++] = (char)(d + '0');\n                    }\n                }\n                else if (cnt == 0)\n                {\n                    miss[miss_cnt++] = (char)(d + '0');\n                }\n            }\n            // \u8ba1\u7b97\u4ee3\u4ef7\n            bool mnz = (window[0] == '0'); // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n            int cost = 0;\n            if (mnz)\n            {\n                // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n                bool found = false;\n                for (int j = 0; j &lt; dup_cnt; j++)\n                {\n                    if (dup[j] == window[0])\n                    {\n                        char best_d = '0';\n                        int min_diff = int.MaxValue;\n                        for (int k = 0; k &lt; miss_cnt; k++)\n                        {\n                            if (miss[k] != '0')\n                            {\n                                int diff = Math.Abs(miss[k] - window[0]);\n                                if (diff &lt; min_diff)\n                                {\n                                    min_diff = diff;\n                                    best_d = miss[k];\n                                }\n                            }\n                        }\n                        if (best_d == '0')\n                        {\n                            cost = int.MaxValue;\n                            break;\n                        }\n                        cost += min_diff;\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) continue;\n            }\n            // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            Array.Sort(dup, 0, dup_cnt);\n            Array.Sort(miss, 0, miss_cnt);\n            for (int j = 0; j &lt; dup_cnt; j++)\n            {\n                cost += Math.Abs(miss[j] - dup[j]);\n            }\n            // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n            min_cost = Math.Min(min_cost, cost);\n        }\n        Console.WriteLine(min_cost);\n    }\n}\n</code></pre> <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String m_str = scanner.nextLine();\n        int n = m_str.length();\n        if (n &lt; 10) {\n            System.out.println(-1);\n            return;\n        }\n        int min_cost = Integer.MAX_VALUE;\n        for (int i = 0; i &lt;= n - 10; i++) {\n            String window = m_str.substring(i, i + 10);\n            int[] freq = new int[10];\n            // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n            for (char d : window.toCharArray()) {\n                freq[d - '0']++;\n            }\n            // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n            boolean is_permutation = true;\n            for (int d = 0; d &lt;= 9; d++) {\n                if (freq[d] != 1) {\n                    is_permutation = false;\n                    break;\n                }\n            }\n            // \u5982\u679c\u662f\u6392\u5217\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n            if (is_permutation) {\n                System.out.println(0);\n                return;\n            }\n            // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            char[] dup = new char[10];\n            char[] miss = new char[10];\n            int dup_cnt = 0, miss_cnt = 0;\n            for (int d = 0; d &lt;= 9; d++) {\n                int cnt = freq[d];\n                if (cnt &gt; 1) {\n                    for (int j = 1; j &lt; cnt; j++) {\n                        dup[dup_cnt++] = (char) (d + '0');\n                    }\n                } else if (cnt == 0) {\n                    miss[miss_cnt++] = (char) (d + '0');\n                }\n            }\n            // \u8ba1\u7b97\u4ee3\u4ef7\n            boolean mnz = (window.charAt(0) == '0'); // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n            int cost = 0;\n            if (mnz) {\n                // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n                boolean found = false;\n                for (int j = 0; j &lt; dup_cnt; j++) {\n                    if (dup[j] == window.charAt(0)) {\n                        char best_d = '0';\n                        int min_diff = Integer.MAX_VALUE;\n                        for (int k = 0; k &lt; miss_cnt; k++) {\n                            if (miss[k] != '0') {\n                                int diff = Math.abs(miss[k] - window.charAt(0));\n                                if (diff &lt; min_diff) {\n                                    min_diff = diff;\n                                    best_d = miss[k];\n                                }\n                            }\n                        }\n                        if (best_d == '0') {\n                            cost = Integer.MAX_VALUE;\n                            break;\n                        }\n                        cost += min_diff;\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) continue;\n            }\n            // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            Arrays.sort(dup, 0, dup_cnt);\n            Arrays.sort(miss, 0, miss_cnt);\n            for (int j = 0; j &lt; dup_cnt; j++) {\n                cost += Math.abs(miss[j] - dup[j]);\n            }\n            // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n            min_cost = Math.min(min_cost, cost);\n        }\n        System.out.println(min_cost);\n    }\n}\n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/","title":"\u9898\u89e3\uff1aP12315 [\u84dd\u6865\u676f 2024 \u56fd C] \u6311\u82f9\u679c","text":"<p>\\(\\mathbf{upd\\ 2025/5/14}\\)\uff1a\u6587\u7ae0\u5185\u5bb9\u7ea0\u9519\uff0c\u5e76\u7edf\u4e00 Markdown \u683c\u5f0f\uff08\u4fdd\u8bc1 \\(\\LaTeX\\) \u88ab\u6b63\u786e\u4f7f\u7528\uff09</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":"<p>\u672c\u9898\u76ee\u89e3\u9898\u7684\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u6570\u5b66\u63a8\u5bfc\u548c\u4e8b\u4ef6\u7edf\u8ba1\uff0c\u8ba1\u7b97\u51fa\u6ee1\u8db3\u6761\u4ef6 \\(l &gt; r\\) \u7684\u6700\u5927\u82f9\u679c\u6570\u91cf\u3002</p> <p>\u6211\u4eec\u8fd9\u91cc\u79f0\u4e8b\u4ef6\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u70b9\u548c\u5b83\u7684\u53d8\u5316\u91cf\uff0c\u7528\u6765\u8868\u793a\u5728\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\u7f8e\u5473\u503c\u7684\u53d8\u5316\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u7684\u4f5c\u7528\u662f\u901a\u8fc7\u626b\u63cf\u7ebf\u7b97\u6cd5\u6765\u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u6ee1\u8db3\u6761\u4ef6\u7684\u82f9\u679c\u6570\u91cf\u3002</p> <p>\u901a\u8fc7\u5bf9\u8fd9\u4e9b\u4e8b\u4ef6\u6309\u4f4d\u7f6e\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u5904\u7406\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u8ba1\u7b97\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u82f9\u679c\u7684\u6700\u5927\u6570\u91cf\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u4e8b\u4ef6\u7edf\u8ba1\u90e8\u5206","title":"\u4e8b\u4ef6\u7edf\u8ba1\u90e8\u5206","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u533a\u95f4\u8ba1\u7b97","title":"\u533a\u95f4\u8ba1\u7b97","text":"<p>\u7531\u9898\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97\u6bcf\u79cd\u82f9\u679c\u7684\u7f8e\u5473\u503c \\(a_i\\) \u7ecf\u8fc7\u64cd\u4f5c\u540e\u6ee1\u8db3\u6761\u4ef6\uff1a\\(\\((a_i + x) \\bmod k \\le t\\)\\)</p> <p>\u63a5\u7740\uff0c\u8ba9\u6211\u4eec\u63a8\u5bfc \\(x\\) \u7684\u8303\u56f4\u3002\u6613\u77e5\uff0c\\((x + m) \\bmod k \\le t\\) \u7b49\u4ef7\u4e8e\uff1a\\(x \\bmod k \\in [(k - m) \\bmod k, (k - m + t) \\bmod k]\\)</p> <p>\u5219\u6211\u4eec\u4ee4\uff1a</p> <ul> <li>\\(l\\) \u662f\u6a21\u8fd0\u7b97\u7684\u4e0b\u754c\uff0c\u4e14\u6709 \\(l = (k - m) \\bmod k\\)\uff1b</li> <li>\\(r\\) \u662f\u6a21\u8fd0\u7b97\u7684\u4e0a\u754c\uff0c\u4e14\u6709 \\(r = (l + t) \\bmod k\\)\u3002</li> </ul> <p>\u5219\u6211\u4eec\u5f97\u5230\u4e86\u6ee1\u8db3\u6761\u4ef6\u7684 \\(x\\) \u7684\u53d6\u503c\u8303\u56f4 \\([l, r]\\)\uff0c\u65b9\u4fbf\u8fdb\u884c\u540e\u7eed\u7edf\u8ba1\u3002</p> <p>\u7279\u522b\u5730\uff1a\u5982\u679c\u533a\u95f4\u8de8\u8d8a\u4e86\u6a21\u6570\u8fb9\u754c\uff08\\(l &gt; r\\)\uff09\uff0c\u9700\u8981\u5206\u6bb5\u5904\u7406\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u4e8b\u4ef6\u7edf\u8ba1","title":"\u4e8b\u4ef6\u7edf\u8ba1","text":"<p>\u4e3a\u4e86\u9ad8\u6548\u7edf\u8ba1\u6ee1\u8db3\u6761\u4ef6\u7684 \\(x\\) \u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5dee\u5206\u6570\u7ec4\u7684\u601d\u60f3\uff0c\u5c06\u533a\u95f4 \\([l , r]\\) \u8f6c\u5316\u4e3a\u4e8b\u4ef6\u3002</p> <p>\u5728\u533a\u95f4 \\([l, r]\\) \u7684\u8d77\u70b9 \\(l\\) \u589e\u52a0 \\(1\\)\uff0c\u8868\u793a\u533a\u95f4\u5f00\u59cb\u3002\u5728\u533a\u95f4\u7684\u7ec8\u70b9 \\(r + 1\\) \u51cf\u5c11 \\(1\\)\uff0c\u8868\u793a\u533a\u95f4\u7ed3\u675f\u3002\u5982\u679c\u533a\u95f4\u8de8\u8d8a\u8fb9\u754c\uff0c\u5219\u5206\u6bb5\u5904\u7406\u4e24\u90e8\u5206\u3002</p> <p>\u5177\u4f53\u5730\uff0c\u5f53\u904d\u5386\u6bcf\u4e2a\u82f9\u679c\u7684\u7f8e\u5473\u503c \\(a_i\\) \u65f6\uff0c\u8ba1\u7b97\u5176\u4f59\u6570 \\(m = a_i \\bmod k\\)\uff0c\u6b64\u65f6\uff1a    - \u6839\u636e \\(t\\) \u548c \\(k\\)\uff0c\u8ba1\u7b97\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4 \\([l, r]\\)\uff1a      - \u5982\u679c \\(l \\le r\\)\uff0c\u53d1\u751f\u4e24\u4e2a\u4e8b\u4ef6\uff1a        - \u5728 \\(l\\) \u4f4d\u7f6e\u589e\u52a0 1;        - \u5728 \\(r+1\\) \u4f4d\u7f6e\u51cf\u5c11 1\u3002      - \u5982\u679c \\(l \\gt r\\)\uff08\u5373\u533a\u95f4\u8de8\u8d8a\u8fb9\u754c\u65f6\uff09\uff0c\u53d1\u751f\u56db\u4e2a\u4e8b\u4ef6\uff1a        - \u5728 \\(l\\) \u4f4d\u7f6e\u589e\u52a0 1;        - \u5728 \\(k\\) \u4f4d\u7f6e\u51cf\u5c11 1;        - \u5728 \\(0\\) \u4f4d\u7f6e\u589e\u52a0 1;        - \u5728 \\(r + 1\\) \u4f4d\u7f6e\u51cf\u5c11 1\u3002</p> <p>\u5b83\u7684\u4f5c\u7528\u662f\u901a\u8fc7\u7edf\u8ba1\u4e8b\u4ef6\uff0c\u5c06\u533a\u95f4\u64cd\u4f5c\u8f6c\u5316\u4e3a\u70b9\u64cd\u4f5c\uff0c\u4fbf\u4e8e\u540e\u7eed\u6392\u5e8f\u548c\u626b\u63cf\u7edf\u8ba1\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u8be5\u90e8\u5206\u4ee3\u7801","title":"\u8be5\u90e8\u5206\u4ee3\u7801\uff1a","text":"C++ <pre><code>vector&lt;pair&lt;int, int&gt;&gt; events;\nfor (int i = 0; i &lt; n; ++i) {\n    int m = a[i] % k;\n    int l, r;\n    if (t &gt;= k) {\n        l = 0;\n        r = k - 1;\n    } else {\n        l = (k - m) % k;\n        r = (l + t) % k;\n        if (l &lt;= r) {\n            events.emplace_back(l, 1);\n            events.emplace_back(r + 1, -1);\n        } else {\n            events.emplace_back(l, 1);\n            events.emplace_back(k, -1);\n            events.emplace_back(0, 1);\n            events.emplace_back(r + 1, -1);\n        }\n    }\n}\n</code></pre> <p>p.s:</p> <p>\u5728\u8fd9\u91cc\u4e8b\u4ef6\u88ab\u5b58\u50a8\u5728 <code>events</code> \u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e2a\u4e8b\u4ef6\u662f\u4e00\u4e2a <code>pair&lt;int, int&gt;</code>\uff0c\u5176\u4e2d\uff1a</p> <ul> <li><code>first</code> \u8868\u793a\u4f4d\u7f6e<code>pos</code>\uff0c\u5373\u6a21 <code>k</code> \u7684\u4f59\u6570\u8303\u56f4\u7684\u8d77\u70b9\u6216\u7ec8\u70b9\u3002</li> <li><code>second</code> \u8868\u793a\u53d8\u5316\u91cf<code>delta</code>\uff0c\u53ef\u4ee5\u662f <code>1</code>\uff08\u5373\u8868\u793a\u5f00\u59cb\u589e\u52a0\uff09\u6216 <code>-1</code>\uff08\u5373\u8868\u793a\u5f00\u59cb\u51cf\u5c11\uff09\u3002</li> </ul> <p>\u5177\u4f53\u6765\u8bf4\uff1a</p> <ul> <li>\u5f53 <code>delta</code> \u4e3a <code>1</code> \u65f6\uff0c\u8868\u793a\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u82f9\u679c\u6570\u91cf\u589e\u52a0\u3002</li> <li>\u5f53 <code>delta</code> \u4e3a <code>-1</code> \u65f6\uff0c\u8868\u793a\u4ece\u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u82f9\u679c\u6570\u91cf\u51cf\u5c11\u3002</li> </ul>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u4e8b\u4ef6\u6392\u5e8f\u4e0e\u626b\u63cf\u90e8\u5206","title":"\u4e8b\u4ef6\u6392\u5e8f\u4e0e\u626b\u63cf\u90e8\u5206","text":"<p>\u63a5\u4e0b\u6765\uff0c\u6839\u636e\u6211\u4eec\u6700\u5f00\u59cb\u63d0\u5230\u7684\uff0c\u6211\u4eec\u8981\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u4e8b\u4ef6\u6392\u5e8f","title":"\u4e8b\u4ef6\u6392\u5e8f","text":"<p>\u6309\u7167\u4f4d\u7f6e <code>pos</code> \u5bf9\u4e8b\u4ef6\u6392\u5e8f\uff0c\u786e\u4fdd\u626b\u63cf\u65f6\u6309\u987a\u5e8f\u5904\u7406\uff0c\u8fd9\u91cc\u76f4\u63a5\u4f7f\u7528 <code>sort()</code> \u51fd\u6570\u5373\u53ef\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u626b\u63cf\u7edf\u8ba1","title":"\u626b\u63cf\u7edf\u8ba1","text":"<p>\u904d\u5386\u4e8b\u4ef6\uff0c\u7ef4\u62a4\u5f53\u524d\u6d3b\u8dc3\u533a\u95f4\u7684\u8ba1\u6570 <code>current</code>\uff0c\u5e76\u5728\u6bcf\u6b21\u4f4d\u7f6e\u53d8\u5316\u65f6\uff0c\u66f4\u65b0\u6700\u5927\u503c <code>max_count</code>\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u672c\u90e8\u5206\u4ee3\u7801","title":"\u672c\u90e8\u5206\u4ee3\u7801","text":"C++ <pre><code>sort(events.begin(), events.end());\nint max_count = 0;\nint current = 0;\nint prev_pos = 0;\nfor (const auto&amp; event : events) {\n    int pos = event.first;\n    int delta = event.second;\n    if (pos &gt; prev_pos) {\n        max_count = max(max_count, current);\n    }\n    current += delta;\n    prev_pos = pos;\n}\nmax_count = max(max_count, current);\n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12315%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20C%5D%20%E6%8C%91%E8%8B%B9%E6%9E%9C/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"<p>\u6700\u540e\u732e\u4e0a\u6211\u7684\u4ee3\u7801\uff1a</p> C++C#JavaPython3 <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAX_EVENTS = 200005; // \u8bb0\u5f97\u5f002\u500d\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    int n, k, t;\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; t;\n    int a[100005]; \n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; a[i];\n    }\n    int diff[100005] = {0};\n    pair&lt;int, int&gt; events[MAX_EVENTS]; \n    int event_count = 0;\n    for (int i = 0; i &lt; n; ++i) {\n        int m = a[i] % k;\n        int l, r;\n        if (t &gt;= k) {\n            l = 0;\n            r = k - 1;\n        } else {\n            l = (k - m) % k;\n            r = (l + t) % k;\n            if (l &lt;= r) {\n                events[event_count++] = {l, 1};\n                events[event_count++] = {r + 1, -1};\n            } else {\n                events[event_count++] = {l, 1};\n                events[event_count++] = {k, -1};\n                events[event_count++] = {0, 1};\n                events[event_count++] = {r + 1, -1};\n            }\n        }\n    }\n    if (t &gt;= k) {\n        cout &lt;&lt; n &lt;&lt; endl;\n        return 0;\n    }\n    sort(events, events + event_count);\n    int max_count = 0;\n    int current = 0;\n    int prev_pos = 0;\n    for (int i = 0; i &lt; event_count; ++i) {\n        int pos = events[i].first;\n        int delta = events[i].second;\n        if (pos &gt; prev_pos) {\n            max_count = max(max_count, current);\n        }\n        current += delta;\n        prev_pos = pos;\n    }\n    max_count = max(max_count, current);\n    cout &lt;&lt; max_count &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    const int MAX_EVENTS = 100005;\n\n    static void Main()\n    {\n        int n, k, t;\n        string[] input = Console.ReadLine().Split();\n        n = int.Parse(input[0]);\n        k = int.Parse(input[1]);\n        t = int.Parse(input[2]);\n\n        int[] a = new int[n];\n        input = Console.ReadLine().Split();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            a[i] = int.Parse(input[i]);\n        }\n\n        List&lt;(int, int)&gt; events = new List&lt;(int, int)&gt;();\n        for (int i = 0; i &lt; n; ++i)\n        {\n            int m = a[i] % k;\n            int l, r;\n            if (t &gt;= k)\n            {\n                l = 0;\n                r = k - 1;\n            }\n            else\n            {\n                l = (k - m) % k;\n                r = (l + t) % k;\n                if (l &lt;= r)\n                {\n                    events.Add((l, 1));\n                    events.Add((r + 1, -1));\n                }\n                else\n                {\n                    events.Add((l, 1));\n                    events.Add((k, -1));\n                    events.Add((0, 1));\n                    events.Add((r + 1, -1));\n                }\n            }\n        }\n\n        if (t &gt;= k)\n        {\n            Console.WriteLine(n);\n            return;\n        }\n\n        events.Sort((x, y) =&gt; x.Item1.CompareTo(y.Item1));\n\n        int maxCount = 0;\n        int current = 0;\n        int prevPos = 0;\n\n        foreach (var eventPair in events)\n        {\n            int pos = eventPair.Item1;\n            int delta = eventPair.Item2;\n\n            if (pos &gt; prevPos)\n            {\n                maxCount = Math.Max(maxCount, current);\n            }\n\n            current += delta;\n            prevPos = pos;\n        }\n\n        maxCount = Math.Max(maxCount, current);\n        Console.WriteLine(maxCount);\n    }\n}\n</code></pre> <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int k = scanner.nextInt();\n        int t = scanner.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i &lt; n; i++) {\n            a[i] = scanner.nextInt();\n        }\n\n        if (t &gt;= k) {\n            System.out.println(n);\n            return;\n        }\n\n        List&lt;Event&gt; events = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            int m = a[i] % k;\n            int l, r;\n            if (t &gt;= k) {\n                l = 0;\n                r = k - 1;\n            } else {\n                l = (k - m) % k;\n                r = (l + t) % k;\n                if (l &lt;= r) {\n                    events.add(new Event(l, 1));\n                    events.add(new Event(r + 1, -1));\n                } else {\n                    events.add(new Event(l, 1));\n                    events.add(new Event(k, -1));\n                    events.add(new Event(0, 1));\n                    events.add(new Event(r + 1, -1));\n                }\n            }\n        }\n\n        events.sort(Comparator.comparingInt(e -&gt; e.pos));\n\n        int maxCount = 0;\n        int current = 0;\n        int prevPos = 0;\n        for (Event event : events) {\n            int pos = event.pos;\n            int delta = event.delta;\n            if (pos &gt; prevPos) {\n                maxCount = Math.max(maxCount, current);\n            }\n            current += delta;\n            prevPos = pos;\n        }\n        maxCount = Math.max(maxCount, current);\n\n        System.out.println(maxCount);\n    }\n\n    static class Event {\n        int pos;\n        int delta;\n\n        Event(int pos, int delta) {\n            this.pos = pos;\n            this.delta = delta;\n        }\n    }\n}\n</code></pre> <pre><code>class Event:\n    def __init__(self, pos, delta):\n        self.pos = pos\n        self.delta = delta\n\ndef main():\n    n, k, t = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if t &gt;= k:\n        print(n)\n        return\n\n    events = []\n    for i in range(n):\n        m = a[i] % k\n        if t &gt;= k:\n            l, r = 0, k - 1\n        else:\n            l = (k - m) % k\n            r = (l + t) % k\n            if l &lt;= r:\n                events.append(Event(l, 1))\n                events.append(Event(r + 1, -1))\n            else:\n                events.append(Event(l, 1))\n                events.append(Event(k, -1))\n                events.append(Event(0, 1))\n                events.append(Event(r + 1, -1))\n\n    events.sort(key=lambda e: e.pos)\n\n    max_count = 0\n    current = 0\n    prev_pos = 0\n    for event in events:\n        pos = event.pos\n        delta = event.delta\n        if pos &gt; prev_pos:\n            max_count = max(max_count, current)\n        current += delta\n        prev_pos = pos\n    max_count = max(max_count, current)\n\n    print(max_count)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12327%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E7%9C%81%20Java%20B%5D%20%E8%9C%97%E7%89%9B/","title":"\u9898\u89e3\uff1aP12327 [\u84dd\u6865\u676f 2023 \u7701 Java B] \u8717\u725b","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12327%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E7%9C%81%20Java%20B%5D%20%E8%9C%97%E7%89%9B/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12327%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E7%9C%81%20Java%20B%5D%20%E8%9C%97%E7%89%9B/#\u9898\u76ee\u5206\u6790","title":"\u9898\u76ee\u5206\u6790","text":"<p>\u9898\u76ee\u63cf\u8ff0\u4e86\u4e00\u53ea\u8717\u725b\u4ece\u4e8c\u7ef4\u5750\u6807\u7cfb\u7684\u539f\u70b9 \\((0, 0)\\) \u51fa\u53d1\uff0c\u6cbf\u7740 \\(x\\) \u8f74\u6216\u7af9\u7aff\u722c\u884c\uff0c\u6700\u7ec8\u5230\u8fbe\u7b2c \\(n\\) \u6839\u7af9\u7aff\u7684\u5e95\u90e8 \\((x_n, 0)\\)\u3002</p> <p>\u8717\u725b\u5728 \\(x\\) \u8f74\u4e0a\u7684\u722c\u884c\u901f\u5ea6\u4e3a \\(1\\) \u4e2a\u5355\u4f4d\u6bcf\u79d2\uff0c\u5728\u7af9\u7aff\u4e0a\u5411\u4e0a\u548c\u5411\u4e0b\u722c\u884c\u7684\u901f\u5ea6\u5206\u522b\u4e3a \\(0.7\\) \u4e2a\u5355\u4f4d\u6bcf\u79d2\u548c \\(1.3\\) \u4e2a\u5355\u4f4d\u6bcf\u79d2\u3002</p> <p>\u6b64\u5916\uff0c\u8717\u725b\u53ef\u4ee5\u5229\u7528\u4f20\u9001\u95e8\u5728\u76f8\u90bb\u7af9\u7aff\u4e4b\u95f4\u5feb\u901f\u79fb\u52a8\u3002\u6211\u4eec\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8717\u725b\u5230\u8fbe\u76ee\u7684\u5730\u7684\u6700\u77ed\u65f6\u95f4\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12327%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E7%9C%81%20Java%20B%5D%20%E8%9C%97%E7%89%9B/#\u89e3\u9898\u601d\u8def","title":"\u89e3\u9898\u601d\u8def","text":"<p>\u8fd9\u9053\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002</p> <p>\u6211\u4eec\u4ee4\u8fd9\u91cc\u6709\u4e24\u7ec4\u6570 \\(dpg\\)\uff0c\\(dpp\\)\u3002\u5176\u4e2d\uff1a</p> <ul> <li>\\(dpg_i\\) \u8868\u793a\u5230\u8fbe\u7b2c \\(i\\) \u6839\u7af9\u7aff\u5e95\u90e8\u7684\u6700\u77ed\u65f6\u95f4\uff1b  </li> <li>\\(dpp_i\\) \u8868\u793a\u5230\u8fbe\u7b2c \\(i\\) \u6839\u7af9\u7aff\u4f20\u9001\u95e8\u8d77\u70b9 \\((x_i, a_i)\\) \u7684\u6700\u77ed\u65f6\u95f4\u3002</li> </ul> <p>\u6bcf\u6b21\u79fb\u52a8\u8003\u8651\u4e24\u79cd\u9009\u62e9\uff1a\u76f4\u63a5\u722c\u884c\u6216\u4f7f\u7528\u4f20\u9001\u95e8\u3002</p> <p>\u6211\u4eec\u53d1\u73b0\uff0c\u8717\u725b\u5230\u8fbe\u7b2c \\(i\\) \u6839\u7af9\u7aff\u5e95\u90e8\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u76f4\u63a5\u4ece\u7b2c \\(i-1\\) \u6839\u7af9\u7aff\u5e95\u90e8\u6cbf \\(x\\) \u8f74\u722c\u8fc7\u6765\uff1b  </li> <li>\u901a\u8fc7\u7b2c \\(i-1\\) \u6839\u7af9\u7aff\u7684\u4f20\u9001\u95e8\u4f20\u9001\u5230\u7b2c \\(i\\) \u6839\u7af9\u7aff\u7684\u67d0\u4e2a\u9ad8\u5ea6\uff0c\u518d\u722c\u4e0b\u6765\u3002</li> </ul> <p>\u5b83\u4eec\u5bf9\u5e94\u7684\u5f0f\u5b50\u5c31\u662f\uff1a</p> <ul> <li>\\(dpg_{i-1} + (x_i - x_{i-1})\\)\uff1b  </li> <li>\\(dpp_{i-1} + b_i \\div 1.3\\)\u3002</li> </ul> <p>\u540c\u65f6\uff0c\u8717\u725b\u5230\u8fbe\u7b2c \\(i\\) \u6839\u7af9\u7aff\u4f20\u9001\u95e8\u8d77\u70b9 \\((x_i, a_i)\\) \u7684\u6700\u77ed\u65f6\u95f4\u4e5f\u53ef\u4ee5\u7531\u4e24\u79cd\u65b9\u5f0f\u5f97\u5230\uff1a</p> <ul> <li>\u4ece\u7b2c \\(i\\) \u6839\u7af9\u7aff\u5e95\u90e8\u722c\u4e0a\u6765\uff0c  </li> <li>\u4ece\u7b2c \\(i-1\\) \u6839\u7af9\u7aff\u7684\u4f20\u9001\u95e8\u7ec8\u70b9 \\(x_i, b_{i-1}\\) \u722c\u8fc7\u6765\u3002</li> </ul> <p>\u5b83\u4eec\u5bf9\u5e94\u7684\u5f0f\u5b50\u5c31\u662f\uff1a</p> <ul> <li>\\(dpg_i + a_i \\div 0.7\\)\uff1b  </li> <li>\u5f53 \\(b_{i-1} \\ge a_i\\) \u65f6\uff1a  </li> <li>\\(dpp_{i-1} + (b_{i-1} - a_i) \\div 1.3\\)\uff1b  </li> <li>\u5f53 \\(b_{i-1} &lt; a_i\\) \u65f6\uff1a  </li> <li>\\(dpp_{i-1} + (a_i - b_{i-1}) \\div 0.7\\)\u3002</li> </ul> <p>\u5177\u4f53\u7ec6\u8282\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u4ece\u5730\u9762\u5230\u4e0b\u4e00\u6839\u7af9\u7aff\u7684\u5730\u9762\uff1a</p> <ul> <li>\u76f4\u63a5\u6cbf \\(x\\) \u8f74\u722c\u884c\u3002</li> </ul> </li> <li> <p>\u4f7f\u7528\u4f20\u9001\u95e8\uff1a</p> <ul> <li>\u4ece\u7b2c \\(i\\) \u6839\u7af9\u7aff\u7684\u4f20\u9001\u95e8\u8d77\u70b9 \\((x_i, a_i)\\) \u4f20\u9001\u5230\u7b2c \\(i+1\\) \u6839\u7af9\u7aff\u7684 \\((x_{i+1}, b_{i+1})\\)\u3002</li> </ul> </li> <li> <p>\u4ece\u5730\u9762\u722c\u5230\u4f20\u9001\u95e8\u8d77\u70b9\uff1a</p> <ul> <li>\u4ece\u7b2c \\(i\\) \u6839\u7af9\u7aff\u7684\u5730\u9762\u722c\u5230\u4f20\u9001\u95e8\u8d77\u70b9 \\((x_i, a_i)\\)\u3002</li> <li>\u5982\u679c\u4ece\u7b2c \\(i-1\\) \u6839\u7af9\u7aff\u7684\u4f20\u9001\u95e8\u7ec8\u70b9 \\((x_i, b_i)\\) \u722c\u5230 \\((x_i, a_i)\\)\uff0c\u65f6\u95f4\u53d6\u51b3\u4e8e \\(b_i\\) \u548c \\(a_i\\) \u7684\u76f8\u5bf9\u9ad8\u5ea6\u3002</li> </ul> </li> </ol>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12327%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202023%20%E7%9C%81%20Java%20B%5D%20%E8%9C%97%E7%89%9B/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"<p>\u8fd9\u91cc\u6211\u7a0d\u5fae\u505a\u4e86\u4e00\u4e9b\u521d\u59cb\u5316\uff1a</p> <p>\u6211\u5c06 \\(dpg_1\\) \u521d\u59cb\u5316\u4e3a \\(x_1\\)\uff0c\u8868\u793a\u4ece\u539f\u70b9\u76f4\u63a5\u5230\u8fbe\u7b2c\u4e00\u6839\u7af9\u7aff\u5e95\u90e8\u7684\u65f6\u95f4\u3002</p> <p>\u5269\u4e0b\u7684\u5c31\u597d\u8bf4\u5566\uff01</p> C++C#Java <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define N 100005\nint n;\nint x[N];\ndouble dpg[N];\ndouble dpp[N];\nint prev_b;     // \u8bb0\u5f55\u524d\u4e00\u4e2a\u4f20\u9001\u95e8\u7684b\u503c\nint main() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++)\n        scanf(\"%d\", &amp;x[i]);\n\n    // \u521d\u59cb\u5316\n    if (n &gt;= 1) {\n        dpg[1] = x[1];\n    }\n    for (int i = 1; i &lt; n; i++) {\n        int a, b;\n        scanf(\"%d%d\", &amp;a, &amp;b);\n\n        // \u8ba1\u7b97\u5230\u8fbe\u5f53\u524d\u4f20\u9001\u95e8\u8d77\u70b9\u7684\u6700\u77ed\u65f6\u95f4\n        double mint;\n        if (i == 1) {\n            // \u7b2c\u4e00\u6b21\u53ea\u80fd\u4ece\u5730\u9762\u722c\u4e0a\u6765\n            mint = dpg[i] + a / 0.7;\n        } else {\n            // \u4e24\u79cd\u9009\u62e9\uff1a\u4ece\u5730\u9762\u722c\u4e0a\u6765 \u6216 \u4ece\u524d\u4e00\u4e2a\u4f20\u9001\u95e8\u8fc7\u6765\n            double op1 = dpg[i] + a / 0.7;\n            double op2 = dpp[i-1] + (prev_b &gt;= a ? (prev_b-a)/1.3 : (a-prev_b)/0.7);\n            mint = min(op1, op2);\n        }\n        dpp[i] = mint;\n        prev_b = b;  // \u4fdd\u5b58\u5f53\u524db\u503c\u4f9b\u4e0b\u6b21\u4f7f\u7528\n        // \u8ba1\u7b97\u5230\u8fbe\u4e0b\u4e00\u6839\u7af9\u7aff\u5e95\u90e8\u7684\u6700\u77ed\u65f6\u95f4\n        dpg[i+1] = min(dpg[i] + (x[i+1]-x[i]), dpp[i] + b/1.3);\n    }\n    // round()\u51fd\u6570\u7528\u4e8e\u53d6\u56db\u820d\u4e94\u5165\u7684\u6574\u6570\u503c\uff0c\u8fd9\u91cc\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff0c\u6240\u4ee5\u8981\u5148\u4e58100\n    printf(\"%.2lf\", round(dpg[n] * 100) / 100.0);\n    return 0;\n}\n</code></pre> <pre><code>using System;\n\nclass Program\n{\n    const int N = 100005;\n    static int n;\n    static int[] x = new int[N];\n    static double[] dpg = new double[N];\n    static double[] dpp = new double[N];\n    static int prev_b; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u4f20\u9001\u95e8\u7684b\u503c\n\n    static void Main()\n    {\n        n = int.Parse(Console.ReadLine());\n        string[] xInput = Console.ReadLine().Split();\n        for (int i = 1; i &lt;= n; i++)\n            x[i] = int.Parse(xInput[i - 1]);\n\n        // \u521d\u59cb\u5316\n        if (n &gt;= 1)\n        {\n            dpg[1] = x[1];\n        }\n        for (int i = 1; i &lt; n; i++)\n        {\n            string[] abInput = Console.ReadLine().Split();\n            int a = int.Parse(abInput[0]);\n            int b = int.Parse(abInput[1]);\n\n            // \u8ba1\u7b97\u5230\u8fbe\u5f53\u524d\u4f20\u9001\u95e8\u8d77\u70b9\u7684\u6700\u77ed\u65f6\u95f4\n            double mint;\n            if (i == 1)\n            {\n                // \u7b2c\u4e00\u6b21\u53ea\u80fd\u4ece\u5730\u9762\u722c\u4e0a\u6765\n                mint = dpg[i] + a / 0.7;\n            }\n            else\n            {\n                // \u4e24\u79cd\u9009\u62e9\uff1a\u4ece\u5730\u9762\u722c\u4e0a\u6765 \u6216 \u4ece\u524d\u4e00\u4e2a\u4f20\u9001\u95e8\u8fc7\u6765\n                double op1 = dpg[i] + a / 0.7;\n                double op2 = dpp[i - 1] + (prev_b &gt;= a ? (prev_b - a) / 1.3 : (a - prev_b) / 0.7);\n                mint = Math.Min(op1, op2);\n            }\n            dpp[i] = mint;\n            prev_b = b; // \u4fdd\u5b58\u5f53\u524db\u503c\u4f9b\u4e0b\u6b21\u4f7f\u7528\n\n            // \u8ba1\u7b97\u5230\u8fbe\u4e0b\u4e00\u6839\u7af9\u7aff\u5e95\u90e8\u7684\u6700\u77ed\u65f6\u95f4\n            dpg[i + 1] = Math.Min(dpg[i] + (x[i + 1] - x[i]), dpp[i] + b / 1.3);\n        }\n        // Math.Round()\u51fd\u6570\u7528\u4e8e\u53d6\u56db\u820d\u4e94\u5165\u7684\u503c\uff0c\u8fd9\u91cc\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\n        Console.WriteLine($\"{Math.Round(dpg[n], 2):F2}\");\n    }\n}\n</code></pre> <pre><code>import java.util.Scanner;\n\npublic class Main {\n    static final int N = 100005;\n    static int n;\n    static int[] x = new int[N];\n    static double[] dpg = new double[N];\n    static double[] dpp = new double[N];\n    static int prev_b; // \u8bb0\u5f55\u524d\u4e00\u4e2a\u4f20\u9001\u95e8\u7684b\u503c\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        n = scanner.nextInt();\n        for (int i = 1; i &lt;= n; i++) {\n            x[i] = scanner.nextInt();\n        }\n\n        // \u521d\u59cb\u5316\n        if (n &gt;= 1) {\n            dpg[1] = x[1];\n        }\n        for (int i = 1; i &lt; n; i++) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n\n            // \u8ba1\u7b97\u5230\u8fbe\u5f53\u524d\u4f20\u9001\u95e8\u8d77\u70b9\u7684\u6700\u77ed\u65f6\u95f4\n            double mint;\n            if (i == 1) {\n                // \u7b2c\u4e00\u6b21\u53ea\u80fd\u4ece\u5730\u9762\u722c\u4e0a\u6765\n                mint = dpg[i] + a / 0.7;\n            } else {\n                // \u4e24\u79cd\u9009\u62e9\uff1a\u4ece\u5730\u9762\u722c\u4e0a\u6765 \u6216 \u4ece\u524d\u4e00\u4e2a\u4f20\u9001\u95e8\u8fc7\u6765\n                double op1 = dpg[i] + a / 0.7;\n                double op2 = dpp[i - 1] + (prev_b &gt;= a ? (prev_b - a) / 1.3 : (a - prev_b) / 0.7);\n                mint = Math.min(op1, op2);\n            }\n            dpp[i] = mint;\n            prev_b = b; // \u4fdd\u5b58\u5f53\u524db\u503c\u4f9b\u4e0b\u6b21\u4f7f\u7528\n            // \u8ba1\u7b97\u5230\u8fbe\u4e0b\u4e00\u6839\u7af9\u7aff\u5e95\u90e8\u7684\u6700\u77ed\u65f6\u95f4\n            dpg[i + 1] = Math.min(dpg[i] + (x[i + 1] - x[i]), dpp[i] + b / 1.3);\n        }\n        // Math.round()\u51fd\u6570\u7528\u4e8e\u53d6\u56db\u820d\u4e94\u5165\u7684\u6574\u6570\u503c\uff0c\u8fd9\u91cc\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff0c\u6240\u4ee5\u8981\u5148\u4e58100\n        System.out.printf(\"%.2f\", Math.round(dpg[n] * 100) / 100.0);\n        scanner.close();\n    }\n}\n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12413%20%E3%80%8CYLLOI-R1-T2%E3%80%8D%E5%9C%A3%E8%AF%9E%E6%98%9F/","title":"\u9898\u89e3\uff1aP12413 \u300cYLLOI-R1-T2\u300d\u5723\u8bde\u661f","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12413%20%E3%80%8CYLLOI-R1-T2%E3%80%8D%E5%9C%A3%E8%AF%9E%E6%98%9F/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":"<p>\u524d\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u4eec\u5b66\u6821\u6559\u7ec3\u5e26\u6211\u4eec\u8fde\u4e86\u5c0f\u6570\u636e\u91cf\u7684\u9910\u5dfe\u8ba1\u5212\u95ee\u9898\u3002\u6240\u4ee5\u6bd4\u8d5b\u7684\u65f6\u5019\u6211\u4fbf\u60f3\u5230\u4e86\u5982\u4e0b\u7684\u601d\u8def\uff1a</p> <p>\u8fd9\u9053\u9898\u6211\u4eec\u53cd\u8fc7\u6765\u770b\uff1a\u65e2\u7136\u6211\u4eec\u8981\u627e\u6700\u5c11\u7684\u603b\u94b1\u6570\uff0c\u90a3\u6211\u4eec\u4e0d\u59a8\u901a\u8fc7\u679a\u4e3e\u7684\u65b9\u5f0f\uff0c\u4e00\u4e2a\u4e00\u4e2a\u679a\u4e3e\uff0c\u627e\u5230\u6700\u5c11\u82b1\u8d39\u3002\u6211\u8fd9\u91cc\u6700\u5f00\u59cb\u5c06\u679a\u4e3e\u7684\u6700\u5927\u503c\u8bbe\u4e3a\u4e86\u6240\u6709\u5546\u54c1\u4e2d\u6700\u8d35\u7684\u5546\u54c1\u7684\u4ef7\u683c\uff08\u8fd8\u80fd\u51f9\uff09\u3002</p> <p>\u597d\u7684\uff0c\u5f00\u5f00\u5fc3\u5fc3\u6253\u4ee3\u7801\u3002\u6253\u5b8c\u4e00\u4ea4\uff0c\u8bf6\uff1f\u600e\u4e48\u53ea\u6709 50 \u5206\uff1f\u5662\uff5e\u539f\u6765\u662f TLE \u4e86\uff08Record\uff09\u3002</p> <p>\u4e8e\u662f\u6211\u5feb\u4e50\u5730\u52a0\u4e0a\u4e86\u4e00\u4e9b\u6761\u4ef6\uff08\u526a\u679d\uff09\uff1a</p> C++ <pre><code>if (cost &gt;= min_cost) {\n    break;\n}\n</code></pre> <p>\u7136\u540e\u53c8\u5feb\u4e50\u5730\u4ea4\u4e86\u4e0a\u53bb\uff0c\u679c\u4e0d\u5176\u7136\uff0c\u53c8\u662f TLE\uff08Record\uff09\u3002\u4f46\u662f\uff0c60 \u5206\u7684\u7ed3\u679c\u544a\u8bc9\u6211\u4f18\u5316\u662f\u53ef\u884c\u7684\u3002\u53ea\u4e0d\u8fc7\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e9b\u9ad8\u6548\u7684\u4f18\u5316\u7b56\u7565\u3002 \u8fd9\u91cc\u6211\u628a\u8ba1\u7b97\u7684\u90e8\u5206\u6a21\u5757\u5316\u5730\u653e\u51fa\u6765\uff08\u65b9\u4fbf\u8c03\u8bd5\u3001\u4fee\u6539\uff09\uff1a</p> C++ <pre><code>long long compute_cost(int x, int w, const vector&lt;int&gt;&amp; a) {\n    long long cost = x * 1LL * w;\n    int coupons = x;\n    for (int i = 0; i &lt; a.size(); ++i) {\n        int discount = min(a[i], coupons);\n        cost += max(a[i] - discount, 0);\n        coupons += 1;\n        if (cost &gt;= (1LL &lt;&lt; 60)) {\n            break; \n        }\n    }\n    return cost;\n}\n</code></pre> <p>\u7136\u540e\uff0c\u518d\u4f7f\u7528\u4e09\u5206\u6cd5\uff0c\u9010\u6b65\u7f29\u5c0f\u641c\u7d22\u8303\u56f4\uff1a</p> C++ <pre><code>while (left &lt;= right) {\n    int mid1 = left + (right - left) / 3;\n    int mid2 = right - (right - left) / 3;\n    long long cost1 = compute_cost(mid1, w, a);\n    long long cost2 = compute_cost(mid2, w, a);\n    if (cost1 &lt; cost2) {\n        right = mid2 - 1;\n        min_cost = min(min_cost, cost1);\n    } else {\n        left = mid1 + 1;\n        min_cost = min(min_cost, cost2);\n    }\n}\n</code></pre> <p>\u6700\u540e\uff0c\u5728\u5c40\u90e8\u8fdb\u884c\u5c0f\u7684\u4f18\u5316\uff0c\u627e\u51fa\u6700\u4f18\u89e3\uff08\u907f\u514d\u4e09\u5206\u9057\u6f0f\uff09\uff1a</p> C++ <pre><code>for (int x = max(left - 5, 0); x &lt;= min(right + 5, max_a + n); ++x) {\n    long long cost = compute_cost(x, w, a);\n    if (cost &lt; min_cost) {\n        min_cost = cost;\n    }\n}\n</code></pre> <p>\u6700\u7ec8\uff0c\u6211\u4eec\u628a\u4ee3\u7801\u4ece \\(O(maxcost \\times n)\\) \u4f18\u5316\u5230\u4e86 \\(O(n \\times \\log maxcost)\\)\uff08\\(maxcost\\) \u6307\u6700\u8d35\u7684\u5546\u54c1\u4ef7\u683c\uff09\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP12413%20%E3%80%8CYLLOI-R1-T2%E3%80%8D%E5%9C%A3%E8%AF%9E%E6%98%9F/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"C++Java <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// \u8ba1\u7b97\u8d2d\u4e70 x \u5f20\u4f18\u60e0\u5238\u540e\uff0c\u4e70\u5b8c\u6240\u6709\u5546\u54c1\u7684\u603b\u82b1\u8d39\n// \u53c2\u6570 x: \u521d\u59cb\u8d2d\u4e70\u7684\u4f18\u60e0\u5238\u6570\u91cf\n// \u53c2\u6570 w: \u6bcf\u5f20\u4f18\u60e0\u5238\u7684\u4ef7\u683c\n// \u53c2\u6570 a: \u5546\u54c1\u4ef7\u683c\u6570\u7ec4\nlong long compute_cost(int x, int w, const vector&lt;int&gt;&amp; a) {\n    long long cost = x * 1LL * w; // \u4f18\u60e0\u5238\u603b\u82b1\u8d39\n    int coupons = x; // \u62e5\u6709\u4f18\u60e0\u5238\u6570\u91cf\n    for (int i = 0; i &lt; a.size(); ++i) {\n        int discount = min(a[i], coupons); // \u5f53\u524d\u5546\u54c1\u7684\u6700\u5927\u4f18\u60e0\n        cost += max(a[i] - discount, 0); // \u8ba1\u7b97\u5546\u54c1\u5b9e\u9645\u82b1\u8d39\n        coupons += 1; // \u83b7\u5f97\u4e00\u5f20\u4f18\u60e0\u5238\n        if (cost &gt;= (1LL &lt;&lt; 60)) { // \u526a\u679d\n            break; \n        }\n    }\n    return cost; // \u8fd4\u56de\u603b\u82b1\u8d39\n}\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    // \u8f93\u5165 n: \u5546\u54c1\u6570\u91cf, w: \u6bcf\u5f20\u4f18\u60e0\u5238\u7684\u4ef7\u683c\n    int n, w;\n    cin &gt;&gt; n &gt;&gt; w;\n    // \u8f93\u5165\u5546\u54c1\u4ef7\u683c\u6570\u7ec4\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    // \u5c06\u5546\u54c1\u4ef7\u683c\u6392\u5e8f\uff0c\u4f18\u5148\u5904\u7406\u4ef7\u683c\u8f83\u4f4e\u7684\u5546\u54c1\n    sort(a.begin(), a.end());\n    int max_a = a.back(); // \u5546\u54c1\u7684\u6700\u9ad8\u4ef7\u683c\n    long long min_cost = 1LL &lt;&lt; 60; // \u521d\u59cb\u5316\u6700\u5c0f\u82b1\u8d39\u4e3a2^60\uff08\u53cd\u6b63\u633a\u5927\uff09\n    // \u4f7f\u7528\u4e09\u5206\u6cd5\u641c\u7d22\u6700\u4f18\u7684\u521d\u59cb\u4f18\u60e0\u5238\u6570\u91cf\n    int left = 0;\n    int right = max_a + n; // \u7406\u8bba\u4e0a\u4f18\u60e0\u5238\u6570\u91cf\u7684\u6700\u5927\u503c\n    while (left &lt;= right) {\n        int mid1 = left + (right - left) / 3; // \u4e09\u5206\u70b9 1\n        int mid2 = right - (right - left) / 3; // \u4e09\u5206\u70b9 2\n        long long cost1 = compute_cost(mid1, w, a); // \u8ba1\u7b97\u4e09\u5206\u70b9 1 \u7684\u603b\u82b1\u8d39\n        long long cost2 = compute_cost(mid2, w, a); // \u8ba1\u7b97\u4e09\u5206\u70b9 2 \u7684\u603b\u82b1\u8d39\n        if (cost1 &lt; cost2) { // \u5982\u679c\u4e09\u5206\u70b9 1 \u7684\u82b1\u8d39\u66f4\u4f4e\n            right = mid2 - 1; // \u7f29\u5c0f\u53f3\u8fb9\u754c\n            min_cost = min(min_cost, cost1); // \u66f4\u65b0\u6700\u5c0f\u82b1\u8d39\n        } else { // \u5982\u679c\u4e09\u5206\u70b9 2 \u7684\u82b1\u8d39\u66f4\u4f4e\n            left = mid1 + 1; // \u7f29\u5c0f\u5de6\u8fb9\u754c\n            min_cost = min(min_cost, cost2); // \u66f4\u65b0\u6700\u5c0f\u82b1\u8d39\n        }\n    }\n    // \u4e09\u5206\u6cd5\n    for (int x = max(left - 5, 0); x &lt;= min(right + 5, max_a + n); x++) {\n        long long cost = compute_cost(x, w, a); // \u8ba1\u7b97\u603b\u82b1\u8d39\n        if (cost &lt; min_cost) { // \u66f4\u65b0\u6700\u5c0f\u82b1\u8d39\n            min_cost = cost;\n        }\n    }\n    cout &lt;&lt; min_cost &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre> <pre><code>import java.util.*;\n\npublic class Main {\n    // \u8ba1\u7b97\u8d2d\u4e70 x \u5f20\u4f18\u60e0\u5238\u540e\uff0c\u4e70\u5b8c\u6240\u6709\u5546\u54c1\u7684\u603b\u82b1\u8d39\n    // \u53c2\u6570 x: \u521d\u59cb\u8d2d\u4e70\u7684\u4f18\u60e0\u5238\u6570\u91cf\n    // \u53c2\u6570 w: \u6bcf\u5f20\u4f18\u60e0\u5238\u7684\u4ef7\u683c\n    // \u53c2\u6570 a: \u5546\u54c1\u4ef7\u683c\u6570\u7ec4\n    static long computeCost(int x, int w, List&lt;Integer&gt; a) {\n        long cost = (long) x * w; // \u4f18\u60e0\u5238\u603b\u82b1\u8d39\n        int coupons = x; // \u62e5\u6709\u4f18\u60e0\u5238\u6570\u91cf\n        for (int price : a) {\n            int discount = Math.min(price, coupons); // \u5f53\u524d\u5546\u54c1\u7684\u6700\u5927\u4f18\u60e0\n            cost += Math.max(price - discount, 0); // \u8ba1\u7b97\u5546\u54c1\u5b9e\u9645\u82b1\u8d39\n            coupons += 1; // \u83b7\u5f97\u4e00\u5f20\u4f18\u60e0\u5238\n            if (cost &gt;= (1L &lt;&lt; 60)) { // \u526a\u679d\n                break;\n            }\n        }\n        return cost; // \u8fd4\u56de\u603b\u82b1\u8d39\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        // \u8f93\u5165 n: \u5546\u54c1\u6570\u91cf, w: \u6bcf\u5f20\u4f18\u60e0\u5238\u7684\u4ef7\u683c\n        int n = scanner.nextInt();\n        int w = scanner.nextInt();\n        // \u8f93\u5165\u5546\u54c1\u4ef7\u683c\u6570\u7ec4\n        List&lt;Integer&gt; a = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            a.add(scanner.nextInt());\n        }\n        // \u5c06\u5546\u54c1\u4ef7\u683c\u6392\u5e8f\uff0c\u4f18\u5148\u5904\u7406\u4ef7\u683c\u8f83\u4f4e\u7684\u5546\u54c1\n        Collections.sort(a);\n        int maxA = a.get(a.size() - 1); // \u5546\u54c1\u7684\u6700\u9ad8\u4ef7\u683c\n        long minCost = 1L &lt;&lt; 60; // \u521d\u59cb\u5316\u6700\u5c0f\u82b1\u8d39\u4e3a2^60\uff08\u53cd\u6b63\u633a\u5927\uff09\n        // \u4f7f\u7528\u4e09\u5206\u6cd5\u641c\u7d22\u6700\u4f18\u7684\u521d\u59cb\u4f18\u60e0\u5238\u6570\u91cf\n        int left = 0;\n        int right = maxA + n; // \u7406\u8bba\u4e0a\u4f18\u60e0\u5238\u6570\u91cf\u7684\u6700\u5927\u503c\n        while (left &lt;= right) {\n            int mid1 = left + (right - left) / 3; // \u4e09\u5206\u70b9 1\n            int mid2 = right - (right - left) / 3; // \u4e09\u5206\u70b9 2\n            long cost1 = computeCost(mid1, w, a); // \u8ba1\u7b97\u4e09\u5206\u70b9 1 \u7684\u603b\u82b1\u8d39\n            long cost2 = computeCost(mid2, w, a); // \u8ba1\u7b97\u4e09\u5206\u70b9 2 \u7684\u603b\u82b1\u8d39\n            if (cost1 &lt; cost2) { // \u5982\u679c\u4e09\u5206\u70b9 1 \u7684\u82b1\u8d39\u66f4\u4f4e\n                right = mid2 - 1; // \u7f29\u5c0f\u53f3\u8fb9\u754c\n                minCost = Math.min(minCost, cost1); // \u66f4\u65b0\u6700\u5c0f\u82b1\u8d39\n            } else { // \u5982\u679c\u4e09\u5206\u70b9 2 \u7684\u82b1\u8d39\u66f4\u4f4e\n                left = mid1 + 1; // \u7f29\u5c0f\u5de6\u8fb9\u754c\n                minCost = Math.min(minCost, cost2); // \u66f4\u65b0\u6700\u5c0f\u82b1\u8d39\n            }\n        }\n        // \u4e09\u5206\u6cd5\n        for (int x = Math.max(left - 5, 0); x &lt;= Math.min(right + 5, maxA + n); x++) {\n            long cost = computeCost(x, w, a); // \u8ba1\u7b97\u603b\u82b1\u8d39\n            if (cost &lt; minCost) { // \u66f4\u65b0\u6700\u5c0f\u82b1\u8d39\n                minCost = cost;\n            }\n        }\n        System.out.println(minCost);\n    }\n}\n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13134%20%5BGCJ%202018%20Qualification%5D%20Go%2C%20Gopher%21/","title":"\u9898\u89e3\uff1aP13134 [GCJ 2018 Qualification] Go, Gopher!","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13134%20%5BGCJ%202018%20Qualification%5D%20Go%2C%20Gopher%21/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":"<p>Special Thanks : @kzt123\uff0c\u6559\u4f1a\u4e86\u6211\u4ea4\u4e92\u9898\u5e76\u4e00\u8d77\u5199\u4e86\u4e00\u4efd\u4ee3\u7801\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13134%20%5BGCJ%202018%20Qualification%5D%20Go%2C%20Gopher%21/#\u9898\u610f\u7406\u89e3","title":"\u9898\u610f\u7406\u89e3","text":"<p>\u4f60\u548c\u4eba\u673a Gopher \u4ea4\u6d41\u65f6\uff0c\u4f60\u6307\u5b9a\u5e03\u7f6e\u4e00\u4e2a\u683c\u5b50\uff0c\u5b83\u4f1a\u5728\u6307\u5b9a\u7684\u683c\u5b50\u4ee5\u53ca\u5468\u56f4\u4e00\u5708\u4e5d\u4e2a\u683c\u5b50\u968f\u673a\u5e03\u7f6e\uff0c\u73b0\u5728\u9700\u8981\u4f60\u8ddf\u5b83\u8fdb\u884c\u4ea4\u4e92\uff0c\u4f7f\u5f97\u5b83\u80fd\u591f\u5e03\u7f6e\u4e00\u4e2a\u5927\u5c0f\u4e0d\u5c0f\u4e8e \\(\\mathbf{A}\\) \u7684\u77e9\u5f62\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13134%20%5BGCJ%202018%20Qualification%5D%20Go%2C%20Gopher%21/#\u6837\u4f8b\u5206\u6790","title":"\u6837\u4f8b\u5206\u6790","text":"<p>\u6839\u636e\u9898\u610f\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0cGopher \u59cb\u7ec8\u4f1a\u5728\u4f60\u9009\u5b9a\u7684\u683c\u5b50\u4e3a\u4e2d\u5fc3\u7684 \\(9 \\times 9\\) \u7684\u533a\u57df\u5e03\u7f6e\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u5728\u4e00\u4e2a\u70b9\u4e0d\u505c\u7684\u5e03\u7f6e\uff0c\u603b\u4f1a\u6709\u4e00\u4e2a\u65f6\u5019\uff0cGopher \u80fd\u591f\u5e03\u7f6e\u5b8c\u5168\u90e8\u4e5d\u4e2a\u683c\u5b50\u3002</p> <p>\u9996\u5148\u6211\u4eec\u770b\u5230\u9898\u76ee\u7ed9\u51fa\u7684\u4f8b\u5b50\uff1a</p> <p>\u8fd9\u91cc\u6211\u4eec\u94fa\u8bbe\u4e86\u4e00\u4e2a \\(3 \\times 4\\) \u7684\u5927\u5c0f\u7684\u77e9\u5f62\uff0c\u6839\u636e\u6211\u4eec\u7684\u601d\u8def\uff0c\u6211\u4eec\u628a\u5b83\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\u3002\uff08\u5982\u4e0b\u8868\uff0c\\(\\text A\\) \u90e8\u5206\u548c \\(\\text{B}\\) \u90e8\u5206\uff09</p> \u884c  \u5217 1 2 3 4 1 A A A B 2 A A A B 3 A A A B <p>\u8fd9\u91cc\uff0c\u8ddf\u7740\u6211\u4eec\u7684\u601d\u8def\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5e03\u7f6e \\(3 \\times 3\\) \u7684\u533a\u57df A\uff0c\u8fd9\u90e8\u5206\u533a\u57df\u53ef\u4ee5\u7167\u7740\u6211\u4eec\u7684\u601d\u8def\u89e3\u51b3\uff0c\u5373\uff1a\u4e0d\u65ad\u5e03\u7f6e\u70b9 \\((2, 2)\\) \u4f7f\u5f97 \\((1, 1)\\) \u5230 \\((3, 3)\\) \u7684\u6240\u6709\u533a\u57df\u5747\u88ab\u5e03\u7f6e\u3002</p> <p>\u8fd9\u65f6\u5019\uff0c\u5c31\u53ea\u5269\u4e0b\u6700\u540e\u4e00\u5217\u4e86\u3002\u4e3a\u4e86\u907f\u514d\u5f80\u5916\u5e03\u7f6e\u66f4\u591a\u65e0\u7528\u7684\u683c\u5b50\uff0c\u6211\u4eec\u5728\u70b9 \\((2, 3)\\) \u4e0d\u65ad\u5e03\u7f6e\uff0c\u4f7f\u5f97\u7b2c\u56db\u5217\u7684\u6240\u6709\u70b9\u88ab\u5e03\u7f6e\u3002</p> <p>\u6240\u4ee5\uff0c\u603b\u7684\u64cd\u4f5c\u5c31\u662f\uff1a\u5904\u7406\u5b8c\u6574\u7684\u4e5d\u5bab\u683c\uff0c\u5904\u7406\u6700\u540e\u5269\u4e0b\u7684\u4e0d\u5b8c\u6574\u7684\u4e5d\u5bab\u683c\u3002</p> <p>\u8fd9\u4e2a\u65f6\u5019\uff0c@kzt123 \u63d0\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 STL \u4e2d <code>bitset</code> \u7684\u7279\u6027\u6765\u5b58\u50a8\u6211\u4eec\u5f53\u524d\u884c\u7684\u683c\u5b50\u7684\u5e03\u7f6e\u72b6\u6001\uff0c\u540c\u65f6\uff0c\u5b83\u8fd8\u53ef\u4ee5\u76f4\u63a5\u88ab\u8d4b\u503c\u4e3a \\(0\\) \u6765\u5feb\u901f\u521d\u59cb\u5316\u6574\u4e2a\u6570\u7ec4\u4e3a\u96f6\u3002</p> \u5c0f\u5c0f\u79d1\u666e\u4e00\u4e0b <p>Tips : <code>bitset</code> \u662f C++ \u4e2d\u7528\u6765\u5b58\u50a8 <code>0</code> \u6216 <code>1</code> \u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u7ed9\u51fa\u6570\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u4e14\u5bf9\u4e8c\u8fdb\u5236\u4f4d\u6570\u6ca1\u6709\u8981\u6c42\uff0c\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u76f4\u63a5\u7528\u5341\u8fdb\u5236\u6570\u6765\u8d4b\u503c\uff08\u6574\u5f62\uff09\u3002</p> <p>\u5b9a\u4e49\u65b9\u6cd5\uff1a</p> <pre><code>bitset &lt;128&gt; bs;\n</code></pre> <p>\u6ce8\uff1a<code>&lt;&gt;</code> \u4e2d\u7684 <code>128</code> \u53ef\u88ab\u66ff\u6362\u6210\u4e3a\u4efb\u4f55\u6b63\u6574\u6570\uff0c\u8868\u793a\u8fd9\u4e2a <code>bitset</code> \u6240\u5360\u7684\u4e8c\u8fdb\u5236\u4f4d\u6570\u3002</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13134%20%5BGCJ%202018%20Qualification%5D%20Go%2C%20Gopher%21/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"C++ <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// b[1], b[2], b[3]\u5206\u522b\u8868\u793a\u7b2c1,2,3\u884c\u7684\u51c6\u5907\u72b6\u6001\nbitset&lt;1005&gt; b[4];\n\nint main() {\n    cin.tie(nullptr)-&gt;sync_with_stdio(false);\n\n    int t;\n    cin &gt;&gt; t;\n\n    while(t--) {\n        // \u91cd\u7f6e\u72b6\u6001\n        b[0] = b[1] = b[2] = b[3] = 0;\n\n        int a;\n        cin &gt;&gt; a;\n\n        // \u8ba1\u7b97\u9700\u8981\u7684\u5217\u6570\n        int b1 = ceil(a / 3.0);\n\n        // \u4ece\u7b2c 2 \u5217\u5f00\u59cb\uff0c\u6bcf\u6b21\u52a0\u4e09\uff08\u79fb\u52a8\u5230\u4e0b\u4e00\u6b21\u7684\u4e2d\u5fc3\u70b9\uff09\n        for(int i = 2; i + 1 &lt;= b1; i += 3) {\n            // \u786e\u4fdd\u5f53\u524d\u533a\u57df\u7684\u683c\u5b50\u90fd\u88ab\u5e03\u7f6e\n            while(!b[1][i-1] || !b[1][i] || !b[1][i+1] ||\n                !b[2][i-1] || !b[2][i] || !b[2][i+1] ||\n                !b[3][i-1] || !b[3][i] || !b[3][i+1]) {\n                // \u5f53\u524d\u533a\u57df\u7684\u4e2d\u5fc3\u5750\u6807\n                cout &lt;&lt; 2 &lt;&lt; \" \" &lt;&lt; i &lt;&lt; endl;\n\n                // \u5b9e\u9645\u51c6\u5907\u7684\u683c\u5b50\n                int t1, t2;\n                cin &gt;&gt; t1 &gt;&gt; t2;\n\n                // \u5df2\u7ecf\u5b8c\u6210\n                if(t1 == 0 &amp;&amp; t2 == 0) {\n                    break;\n                }\n\n                // \u6807\u8bb0\u8be5\u683c\u5b50\n                b[t1][t2] = 1;\n            }\n        }\n\n        // \u5904\u7406\u6700\u540e\u51e0\u5217\n        int t1, t2;\n        cout &lt;&lt; 2 &lt;&lt; \" \" &lt;&lt; b1 - 1 &lt;&lt; endl;\n\n        // \u4e0d\u65ad\u53d1\u51fa\u5750\u6807\uff0c\u76f4\u5230\u5b8c\u6210\n        while(cin &gt;&gt; t1 &gt;&gt; t2) {\n            if(t1 == 0 &amp;&amp; t2 == 0) {\n                break;\n            }\n            cout &lt;&lt; 2 &lt;&lt; \" \" &lt;&lt; b1 - 1 &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13422%20%5BCOCI%202019%262020%204%5D%20Pod%20starim%20krovovima/","title":"\u9898\u89e3\uff1aP13422 [COCI 2019&2020 4] Pod starim krovovima","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13422%20%5BCOCI%202019%262020%204%5D%20Pod%20starim%20krovovima/#\u601d\u8def\u4e0e\u7b97\u6cd5","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13422%20%5BCOCI%202019%262020%204%5D%20Pod%20starim%20krovovima/#\u601d\u8def","title":"\u601d\u8def","text":"<p>\u7531\u4e8e\u8fd9\u9053\u9898\u6211\u4eec\u9700\u8981\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u5269\u4f59\u7684\u676f\u5b50\u591a\uff0c\u6240\u4ee5\u53cd\u8fc7\u6765\u770b\uff0c\u5c31\u662f\u4f7f\u7684\u4f7f\u7528\u4e86\u7684\u676f\u5b50\u5c3d\u91cf\u5c11\u3002\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u7531\u4e8e\u676f\u5b50\u6570\u91cf\u662f\u4e00\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97\u5927\u676f\u5b50\u88c5\u7684\u66f4\u591a\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u4e8e\u662f\uff0c\u4e0d\u96be\u60f3\u51fa\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u6392\u5e8f\u3002\u4f46\u662f\uff0c\u6211\u4eec\u600e\u4e48\u77e5\u9053\u6bcf\u4e2a\u676f\u5b50\u6709\u591a\u5c11\u9152\uff0c\u540c\u65f6\uff0c\u6211\u4eec\u600e\u4e48\u77e5\u9053\u6bcf\u4e2a\u676f\u5b50\u5e94\u8be5\u5728\u54ea\u4e2a\u4f4d\u7f6e\u5462\uff1f</p> <p>\u8fd9\u91cc\uff0c\u5c31\u6709\u7ed3\u6784\u4f53\u7684\u597d\u5904\u4e86\u3002\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u4f7f\u5f97\u5b83\u80fd\u5b58\u4e0b\u4e00\u4e2a\u9152\u676f\u4e2d\u73b0\u5728\u7684\u9152\u91cf\uff0c\u9152\u676f\u7684\u6700\u5927\u5bb9\u79ef\uff0c\u4ee5\u53ca\u5b83\u8f93\u5165\u65f6\u7684\u5e8f\u53f7\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u8981\u4ece\u5c0f\u5230\u5927\u4f9d\u7167\u5b83\u8f93\u5165\u65f6\u7684\u5e8f\u53f7\u6392\u5e8f\u5373\u53ef\u3002</p> <p>\u7531\u4e8e\u6700\u5f00\u59cb\u7684\u9152\u91cf\u5e76\u4e0d\u91cd\u8981\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u603b\u7684\u9152\u91cf\u5355\u72ec\u5b58\u5728\u53d8\u91cf \\(sum\\) \u4e2d\uff0c\u5728\u8ba1\u7b97\u65f6\u65b9\u4fbf\u8fdb\u884c\u5206\u914d\u3002</p> <p>\u4e0d\u8fc7\u4e0d\u8981\u5fd8\u4e86\uff0c\u4f7f\u7528 <code>sort()</code> \u51fd\u6570\u6392\u5e8f\u65f6\uff0c\u9700\u8981\u81ea\u5df1\u5199\u6bd4\u8f83\u51fd\u6570\u54e6\uff01</p>"},{"location":"%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7/%E9%A2%98%E8%A7%A3%EF%BC%9AP13422%20%5BCOCI%202019%262020%204%5D%20Pod%20starim%20krovovima/#\u4ee3\u7801","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define file(s) \\\n    std::freopen(#s\".in\", \"r\", stdin), std::freopen(#s\".out\", \"w\", stdout)\n\n// \u79d1\u666e\u4e00\u4e0b\uff1a\u7f29\u5199\nusing i64 = long long;\nusing ull = unsigned long long;\nusing f32 = double;\nusing ldb = long double;\n\ninline int read() {\n    register int x = 0, sign = 1;\n    register char ch = getchar_unlocked();\n    for (; !isdigit(ch); ch = getchar_unlocked()) {\n        if (ch == '-') {    \n            sign = -1;\n        }\n        if (ch == EOF) {\n            return EOF;\n        }\n    }\n    for (; isdigit(ch); ch = getchar_unlocked()) {\n        x = x * 10 + ch - '0';\n    }\n    return x * sign;\n}\n\nconstexpr int N = 1e3 + 5;\n\n// \u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\nstruct cup{\n    // \u73b0\u5728\u676f\u5b50\u4e2d\u6709\u7684\u9152\u91cf\u3001\u676f\u5b50\u5bb9\u79ef\u3001\u88ab\u5b50\u5e8f\u53f7\n    int wine, size, id;\n}c[N];\nbool sz_cmp(cup a, cup b) {\n    return a.size &gt; b.size;\n}\nbool id_cmp(cup a, cup b) {\n    return a.id &lt; b.id;\n}\n\nint n;\ni64 sum = 0;\n\nint main() {\n    n = read();\n    for (int i = 1; i &lt;= n; i++) {\n        int t = read(), z = read();\n        sum += t;\n        c[i] = (cup){0, z, i};\n    }\n    std::sort(c+1, c + 1 + n, sz_cmp);\n    int i = 1;\n    while (sum &gt; 0) {\n        if (c[i].size &lt;= sum) {\n            sum -= c[i].size;\n            c[i].wine = c[i].size;\n        } else {\n            c[i].wine = sum;\n            sum = 0;\n        }\n        i++;\n    }\n    std::sort(c + 1, c + 1 + n, id_cmp);\n    printf(\"%d\\n\", n - (i - 1));\n    for (i = 1; i &lt;= n; i++) {\n        printf(\"%d \", c[i].wine);\n    }\n    return 0;\n}\n</code></pre> <p>\u4ee3\u7801\u4e2d\u7684\u4e00\u4e9b\u5c0f\u6ce8\u610f\u70b9\uff1a</p> <ul> <li> <p>\u56e0\u4e3a\u6211\u7684\u4e0b\u6807\u662f\u4ece \\(1\\) \u5f00\u59cb\u5b58\u7684\uff0c\u6240\u4ee5\u6211\u5728 <code>while()</code> \u5faa\u73af\u4e2d\u7528\u7684\u4e5f\u662f\u4ece \\(1\\) \u5f00\u59cb\uff1b</p> </li> <li> <p>\u5982\u679c\u5269\u4f59\u7684\u9152\u4e0d\u80fd\u586b\u6ee1\u676f\u5b50\u65f6\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u676f\u5b50\u91cc\u88c5\u4e0b\u5269\u4f59\u7684\u9152\uff1b</p> </li> <li> <p>\u7531\u4e8e\u6211\u4eec\u9700\u8981\u8f93\u51fa\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u662f\u5269\u4f59\u7684\u676f\u5b50\u6570\u91cf\uff0c\u7531\u4e8e\u6211\u4eec\u7684 \\(i\\) \u7684\u503c\u662f\u4f7f\u7528\u4e86\u7684\u676f\u5b50\u7684\u6570\u91cf\u52a0 \\(1\\)\uff08\u539f\u6765\u5c31\u662f \\(1\\)\uff0c\u6bcf\u6b21\u4f7f\u7528\u52a0\u4e86 \\(1\\)\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u6700\u7ec8\u8981\u8fd4\u56de\u53bb\uff0c\u8f93\u51fa\u603b\u676f\u5b50\u6570\u51cf\u53bb\u5df2\u4f7f\u7528\u7684\u676f\u5b50\u6570\uff08<code>n - (i - 1)</code>\uff09\u3002</p> </li> </ul>"}]}